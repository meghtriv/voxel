[
  {
    "name": "Model.java",
    "path": "src/com/ch/Model.java",
    "content": {
      "structured": {
        "description": "A `Model` class that loads 3D model data from an array of vertices and an array of indices, and then renders the model using OpenGL. The code creates a vertex array object (VAO) for storing the vertex positions and indices, and uses OpenGL functions to bind the VAO, enable vertex attribs, draw the model, disable attribs, and unbind the VAO. Additionally, the code provides methods for getting the VAO handle and the number of vertices in the model.",
        "diagram": {
          "path": "src/com/ch/Model.java",
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    GL30 [label=\"org.lwjgl.opengl.GL30\", style=\"rounded,filled\"]\n    GL20 [label=\"org.lwjgl.opengl.GL20\", style=\"rounded,filled\"]\n    Chunk []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Model [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    GL11 [label=\"org.lwjgl.opengl.GL11\", style=\"rounded,filled\"]\n    GL15 [label=\"org.lwjgl.opengl.GL15\", style=\"rounded,filled\"]\n    Chunk -> Model [penwidth=2]\n    Model -> GL11 [style=\"dashed\"]\n    Chunk -> Model [style=\"dashed\"]\n    Model -> GL30 [style=\"dashed\"]\n    Model -> GL15 [style=\"dashed\"]\n    Model -> GL20 [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 694 1040\"><svg id=\"d2-svg\" class=\"d2-4291077933\" width=\"694\" height=\"1040\" viewBox=\"11 11 694 1040\"><rect x=\"11.000000\" y=\"11.000000\" width=\"694.000000\" height=\"1040.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-4291077933 .text {\n\tfont-family: \"d2-4291077933-font-regular\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4291077933 .text-italic {\n\tfont-family: \"d2-4291077933-font-italic\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4291077933 .text-mono {\n\tfont-family: \"d2-4291077933-font-mono\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,d09GRgABAAAAABHUAAoAAAAAHnwAAgm6AAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAAA9AAAAGAAAABgld/X+GNtYXAAAAFUAAAAhAAAAKACtgK5Z2x5ZgAAAdgAAAf/AAAKnITOgiRoZWFkAAAJ2AAAADYAAAA2GanOOmhoZWEAAAoQAAAAJAAAACQGMwCoaG10eAAACjQAAABjAAAAhE1YCitsb2NhAAAKmAAAAEQAAABELP4vvm1heHAAAArcAAAAIAAAACAAVQJhbmFtZQAACvwAAAa4AAAQztydAx9wb3N0AAARtAAAACAAAAAg/7gAMwADAlgBkAAFAAACigJYAAAASwKKAlgAAAFeADIBIwAAAgsFCQMEAwICBCAAAvcCADgDAAAAAAAAAABBREJPAEAAIP//Au7/BgAAA9gBEWAAAZ8AAAAAAeYClAAAACAAA3icXMzLjUEBGEDh7z7mfWfmzh3vRw8SUYGFDVWI2IqVQhSAJiwk6qGKXyJWzvIsPiQyCQq5LSqlTGpoZGxiZmFlE4HB403NLa0j4hqXOMcpjnGIfezu0nNtHV09fYlUJvfi1Zt3Hz59KXz78av0p/Kvpq6hqcUNAAD//wEAAP//ZHQZYHicjFZ/aBvn+X/eV7LOjuUfZ+kkSz7rJJ11Z+uH5ep0d7ItS9Zvy7Fr+2zFrms7TpPGiZN+cZw2/ab5sSRtWuL98krZ+kdYV1ZYIaRQyli7MQb5Y7jQbqOwQaGDkoEWukKZcQdj8WncSbG9wmB/nF7xSu/zeZ/P8/k8z0EdJACwE78GBmgAM7QBBSCQHtLn4XmWIGTeLsgyy2AygT5TNxEqRo3Sc9eu3TE+lv5b+ti38Gu7ZwdeWlmZLD/4YOn5579bRr8DBKnKDvbj29AJUOflODEqSULEZic4jvWaTJTVZhMikmw3mdDRqetjYzdLgwt02JHuSS5Go4vJ0AgT5o+bp14/s/q60ucWOzypC4pyMc2xQigCAAjEyg6m8G1g/lt8ISKLrCiQJhOaUq4XD79YSs3R4fZkeGhBOH2s2PPiH5inawBCp+j0pi4ol3/A38mpXzIhQPAyAO7Em1CncSGQHuplBeXw5u4vCqDjjwDgVrwJHfrvFrsgWwSSJaOSJLOEgTXwrAtT5MjJBbeRWTw5WUdgg28pvsBhg6kOb6oPVldR++4aGnHPluhrqorwNbo061bf12JPVnZwB9r+H7ibH/v//Ojl4uCcq8eV4mKlvvBMLHTY5es+bo6vTyrrcX+n6HSFSzF5JtzlELu6AQBDvLKD/oW3wAoeHeERgMCLAsnyrMnER2RxDw21HH02+XR/MM8YjEqWMLim6ZGUJ+n253rGzDcvTpxPeFzzv9qNDTOhXHGbcYanY7PHNZxsZQc70TaYtCohr4nwcJxhPyHKaiI8+7kk4kuNSKp7PFJ8Pp8/lzr9HMbq9frTY8GCx9W1iN4dHzk8qmbi56cm1oeurDQ7DykzDkpq92r1MMBIxY0ltA19EIexWlZaDmJUqi2SELELFGvTcE2sl+OrMqlexGSISGJUy5iy2izV73v/Qd2rFyYtjIt2sOKs0MN8eJVsj5RES8DaZhX7nll6Mn1xLpxKhXvT6f7SU3LsKOVr9dJTnxeGE73GRo6xP2YxWoYD4uMBc4aMdkYPdzc0NNIkTUcTocfD6N1kVEgmhWhS/Xbcx7YbjZYeitM0uAiAG/FW1Y8CRQhV2jSZaTclyEWlzsDN9h9RlGg8kA3grXvne6QTy+oniM1lgkH1LgBUKjAPgH6MP8IcuAC0avRV9+UKX9t37+8DglUAnMBbYK5qX0ACYWF5glpVjMi0dO+zhffO4y3VheA36qdfn3tJPzNa2cEOvAWtVe5JzXq6CbXS/mh8+m5FDAT6KG/M/MQRdD+z+0exzzbU3KKfHQDAvWhbU6NACnY9Tft+rnqqezkPpAlsifgLFCX4hX4l6vBYx+wdDl8bKg97/TN8aLyovoWOlHyc+hN0xB/Q1kdcom2wHsD4DyqzhJGb26MSlae/yaTuG0yjbWjRXH/AmbqA+AMCQsHhZzKZZ4arn/lSKZ8vlWqOjK8rk+vx7Mr0zKlTM9MrWtzFiqDH1f1o379dTaesnbI8Ck5QNttiljB4nwg9tZI4MeidcBuMN1Kl4aK7yLH5j/F7Cbf/lXPKhYTHtfAWMq3MTx5nuW3GqfH8KgB2oG1oO8hBra0Q5KtZwsCtZTrCNoujq1N+OojK5wezDY2FhvrkmPoXQFCo7OBmtA3deva8rHtXjHIcr1OxH4yy2uwurN0fSYXLQc5/MpMYolLppeWTJ2Knurq9SjgRyYxOzXoiy+YQI7m6QozFRTdZM/LghM8h2mk/zXhbSb/k49PdukZylR3sxTegvca8yIqyLFACxeq9vtpCNgoKe+s7jdmvvhLzbMzZ5imahfl4OVF3+3bmr6ms+VDcTAKC8coO+icqa1qwa1qtKlWSyVr3+8esMi0M+XPdSoYw+ubMJ5ZRr/rnXCYQRlOqsxSQAIEAgH2oDE0AHoNgsdk0OmWLYEDw8fRaS0eTscnRsjbxISqrX/oKLFvwIavqrPqrHgBPorLWFYX9s7Jg34/C8hzPmghifVUZIBqNxrqW+rgyUN9mNJoaiIGxU6sxs9loNkuorJa9KZZNeR8+rK7IqTofCIuLwgMdaxgA21EZHACCzO9ByAJhZ3lOAzERxPAHd54cb+psMTbTTcXZu7+cL7V4Wo0trpbJh1+csQSs1qD19N+/XqN6KVvAvqb3W00LJN6ARrAD+2iKVEV70AnygX0UXL10afXMCy+cyZRKGe1x+HwOh89nfueNN99++8033knfuLVx5crGrRu/72IYlmWYLj2HYwC4DV/V+5E2oURJkrWGeOz978fGmaGfZdGfxHp76+5vs1V+cwD4EN7QZ7OYwDXn8HumIiRJEKji2R+OZwuhcSYcOJFZXhu9Oesaoj95bHnzWVHOh9zhoLhSil96ZQIbC4Cgv7KDTXgD/N/QPivuWZPfawYEVVM/o5xj/e75odTc6tVzy4XB0KQ72L0yFD8aGx8MFILJU2aZlVy9w2J/PpmLhKWuzigb4kaiA6NWY0MgHYwpQUAQq+zgQ/hqbVrXsPdQLR7KQ+z3IeQqnfX1uGeGQ6OBI4XumDdIodPq5yQt+oaOD2bOmiWPRIe60sH0qNVCI6Hwa3NzYC6XO1Z9r9JmxfdQWXvv8ZCs6CFR/D6Kop9mdPEi+AKPof/DH0GjNtEP1pbmOJrmODzGdnay2lOthTZjtHhtutce8aZHtppM97iRzg5nP12M3EdR39ynluahpuZ8Av08ozbHF8R/AwAA//8BAAD//+KUNW0AAAEAAAACCbp9FUltXw889QADA+gAAAAA3B0N9wAAAADcHHNL/z/+OgMZBCQAAAADAAIAAAAAAAAAAQAAA9j+7wAAAlj/P/8/AxkAAQAAAAAAAAAAAAAAAAAAACF4nCyMTQrBcQAFp1m5j+Sjf6KIlLKclIWtgziAYzqF1G/1ejM1xtbYGwvjbZyNmzEZh/Efxt1YGi/jYmwGn8Z+jJNxNK7G3JgZu8Gfw62N1eh9/80fAAAA//8BAAD//4ueFcYAAAAAKgBaAIoAmgDIAPgBLAFiAcwB8AH8AggCIgJAAnIClALAAvQDFANSA3gDmgO4A+4EGgRQBGgEkgTQBQYFFgUuBU4AAQAAACEB+AAqAGUABgABAAAAAAAAAAAAAAAAAAMAA3icnJZLbJPZFcd/zrkBv3gZVA0IVVcjhKYIjJ1JwE0g4JABwiBCSWbaClHVJMaxSOzIdmDoYhZdVl11XXUzXbQStAolaiaBQiCkagWq1EU1q666qLroqppFV9V3vuPEcRI6g5DI7z7O/57Xvf6Ai3ILIeKiEUiCcYQkSeMODvGOsZDklLEjyUXjTpKMGm8jyQ+Nt5Ni0jjKYT41jnGYXxrHOcKfjROc4D/GSQYjR4x30hupGO/iYORXxrvpiiwb72nxM8XByJfGe1d1YsBKR8o4wjc7vjDuYGfHl8bCZXHGrmVPJ+Ny1XgbR+SR8Xaeyd+No3S7XxjH6HZ/NU7Q1bnNeIf4zpzxTrqj3ws5ArujPzWOsDv6c+MODkTvGwvJ6IqxIxU1/Ugnqeg/jLeRilosQf5jUeMoh2IHjGP4WL9xnKOxHxgnyMR+YpwkHVsw3kFX7J/GO8nFmzq7OBy/ZrybU/FPjPe0+Jzi3bjlKrK3RXPfqub+CKTifzOOkIo35zt4N/5fY2Ff4qCx40AiY9zJgcQl420cSIwbb2df4lPjKJnEz4xjvJd4bhznaOJfxgm6k98wTpJLNjV3cir5Y+NdZJJ/MN7NxeS/jfe0+Jmia8cJ472BjszKM1mUV3gKLVyijOcwnkm8PJY5vMzKgizJnDyWV/JE5uS5fCb35bH8Hh+5JEvyQP4kT/DysIXnW3hFPpMHsiQP5XNZkKd4l5UFeSlL8rksyqLOvjL7WfmjvMZzveMLbgRnyCN5oCqhLwtyX+ZlTpYDHa6T4YYsy0t5Jk/ld2q/onq/wcszmZXXsiizuvPYFjufynON8YUsy5wsyW/lRXOW6xzhhryQ1/JYHspTWQxODc6Wl3h5pDOzahPObO7joS1Ovo+XOXkis5qFIMvLzXn196ie3pJfjqqna3VryXfbWknHG/PeUhXbsVpJfo2niwxZMniO2ahLR3nGqXKTIp4R7lGnQZEp6niGqDBGlRrT+n9B18bxvMcEDRpM08txjnNX/6UprKql1XKK43wr8Ie7lGkwgecaReoUqXHH1M5TpUIDzxUKTAW++HcYocoMNcYo+v2kW8d4zlFlXOkqNaqqWmKGSQrU6CJNhvfJ0UeeQQYYpm+dQtM+tD7WZh9aDTPAB3ysvtYpq5d+nfYEVRoaaYU7eLK6liZLlhP0MUWB2xR11y2KfKIeBwo9pDlBDye0Ll/ds/VZKGudCngaWp9xrV2w7zaeKrfeusJljTWoWGD3ERWtX7g2QsN2hqdXGOe42nuNdEIz5lV5Ritbo6y702/lzVUKGr9nkDSei6Ya9NWoZjf4O6P9FvhdpPI1+rPBPaYpMsqE5XOtH0c0hw3uak7XMj5JWStQ0U4OcjKjWQjjbmZthCEu4xlW/co65cvrFIJI2vssq32U1tgmNj13rf53KFDWDrnJpK6s3beCnpvnO8oNevFt2akzphWapqE1qqtWWmtQ4jjDnOdymyf/P0fj+jes/U1mVrsnjC7omuCW5xnRyo/4/XgGdDzEiGbkuwwxykWG+YhRHee5xjXyXGGUIT5Q22Gu6XswzBUG1WJIOVw7rzfgCt/H8yFDuifQLlp+wooFN3Nava+r72Evl5liWnMeeJ7WWIsa4devsOeWqTZt62ozRplbutNr/Sp61wuUrCum1cMpzWWzN9ZuXdgRUxpLUNu19RJVfV9renMDVc89ezuCbg19Cl+Ixleoavqteqa+msOi+rx+XLLfgbK+jeGr0/xGGdFfgrL+fo2p14FtEFHwe9k+M79hZkVrVeMm5bDXZIVz3NPTJu0eeW5qbGoRfplQ1yrUtUaBRz9SlWrzm8ReiyolfZ+mNXNjeqPu6SjsAv0q2XJvwV69mmb9dvN7ZMPZwVs1ae++19hKpn6IGxSYNJWKvZSeCjP6+1nT1fCuaWxk3+hPu1K99UtlQxWP6tveXpP22m62S79m2ivjsuuqvZndijvjzrp+l3cDrt99G+8y7TOU3Md4l8O7v+BdHu9OuozLux53wfW6jDvlci7vMkp51+tygVXkknK/ap3RHafdh8GKPNxyZX7LlRU976zLrp3gskpnXc71uT6Xcxdcj65m3DDe9bqzLuMGgnGzB9XvC6rT6067c24gVHenXb/rc5ebvegGXM6dcf3ufdUYbDmz2/W4wcCzZi9uujf04KTrcj3upOt2/WGmmv24pR8n3WmXcb16Tr9GlQlUm525hV89VpFTGn+wZ8D1BBlp7bWNdQ764Y012pBvtdjQHW/Umd+sM95osfI/AAAA//8BAAD//5uVuAcAAwAAAAAAAP+1ADIAAAABAAAAAAAAAAAAAAAAAAAAAA==\");\n}\n.d2-4291077933 .text-mono-bold {\n\tfont-family: \"d2-4291077933-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-4291077933 .fill-N1{fill:#ECEDED;}\n\t\t.d2-4291077933 .fill-N2{fill:#676C7E;}\n\t\t.d2-4291077933 .fill-N3{fill:#9499AB;}\n\t\t.d2-4291077933 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-4291077933 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-4291077933 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-4291077933 .fill-N7{fill:#151719;}\n\t\t.d2-4291077933 .fill-B1{fill:#717D86;}\n\t\t.d2-4291077933 .fill-B2{fill:#717D86;}\n\t\t.d2-4291077933 .fill-B3{fill:#ffff00;}\n\t\t.d2-4291077933 .fill-B4{fill:#151719;}\n\t\t.d2-4291077933 .fill-B5{fill:#151719;}\n\t\t.d2-4291077933 .fill-B6{fill:#151719;}\n\t\t.d2-4291077933 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-4291077933 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-4291077933 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-4291077933 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-4291077933 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-4291077933 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-4291077933 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-4291077933 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-4291077933 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-4291077933 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-4291077933 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-4291077933 .stroke-N7{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-B1{stroke:#717D86;}\n\t\t.d2-4291077933 .stroke-B2{stroke:#717D86;}\n\t\t.d2-4291077933 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-4291077933 .stroke-B4{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-B5{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-B6{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-4291077933 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-4291077933 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-4291077933 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-4291077933 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-4291077933 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-4291077933 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-4291077933 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-4291077933 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-4291077933 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-4291077933 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-4291077933 .background-color-N7{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-B1{background-color:#717D86;}\n\t\t.d2-4291077933 .background-color-B2{background-color:#717D86;}\n\t\t.d2-4291077933 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-4291077933 .background-color-B4{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-B5{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-B6{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-4291077933 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-4291077933 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-4291077933 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-4291077933 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-4291077933 .color-N1{color:#ECEDED;}\n\t\t.d2-4291077933 .color-N2{color:#676C7E;}\n\t\t.d2-4291077933 .color-N3{color:#9499AB;}\n\t\t.d2-4291077933 .color-N4{color:#CFD2DD;}\n\t\t.d2-4291077933 .color-N5{color:#DEE1EB;}\n\t\t.d2-4291077933 .color-N6{color:#EEF1F8;}\n\t\t.d2-4291077933 .color-N7{color:#151719;}\n\t\t.d2-4291077933 .color-B1{color:#717D86;}\n\t\t.d2-4291077933 .color-B2{color:#717D86;}\n\t\t.d2-4291077933 .color-B3{color:#ffff00;}\n\t\t.d2-4291077933 .color-B4{color:#151719;}\n\t\t.d2-4291077933 .color-B5{color:#151719;}\n\t\t.d2-4291077933 .color-B6{color:#151719;}\n\t\t.d2-4291077933 .color-AA2{color:#ECEDED;}\n\t\t.d2-4291077933 .color-AA4{color:#CFD2DD;}\n\t\t.d2-4291077933 .color-AA5{color:#DEE1EB;}\n\t\t.d2-4291077933 .color-AB4{color:#CFD2DD;}\n\t\t.d2-4291077933 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"161.000000\" y=\"12.000000\" width=\"394.000000\" height=\"522.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"674.000000\" width=\"692.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"707.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"211.000000\" y=\"62.000000\" width=\"294.000000\" height=\"417.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"729.000000\" width=\"592.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"758.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Model\"><g class=\"shape\" ><rect x=\"278.000000\" y=\"363.000000\" width=\"160.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"358.000000\" y=\"401.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Model</text></g><g id=\"org.lwjgl.opengl\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"784.000000\" width=\"492.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"809.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">opengl</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"261.000000\" y=\"112.000000\" width=\"194.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"137.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"org.lwjgl.opengl.GL11\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"203.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL11</text></g><g id=\"org.lwjgl.opengl.GL15\"><g class=\"shape\" ><rect x=\"265.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"306.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL15</text></g><g id=\"org.lwjgl.opengl.GL20\"><g class=\"shape\" ><rect x=\"368.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"409.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL20</text></g><g id=\"org.lwjgl.opengl.GL30\"><g class=\"shape\" ><rect x=\"471.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"512.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL30</text></g><g id=\"com.ch.voxel.Chunk\"><g class=\"shape\" ><rect x=\"311.000000\" y=\"162.000000\" width=\"94.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"358.000000\" y=\"200.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Chunk</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL11)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 310.000000 430.000000 L 310.000000 569.000000 S 310.000000 579.000000 300.000000 579.000000 L 213.500000 579.000000 S 203.500000 579.000000 203.500000 589.000000 L 203.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"238.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL15)[0]\"><path d=\"M 342.000000 430.000000 L 342.000000 619.000000 S 342.000000 629.000000 332.000000 629.000000 L 316.500000 629.000000 S 306.500000 629.000000 306.500000 639.000000 L 306.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"341.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL20)[0]\"><path d=\"M 374.000000 430.000000 L 374.000000 619.000000 S 374.000000 629.000000 384.000000 629.000000 L 399.500000 629.000000 S 409.500000 629.000000 409.500000 639.000000 L 409.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"444.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL30)[0]\"><path d=\"M 406.000000 430.000000 L 406.000000 569.000000 S 406.000000 579.000000 416.000000 579.000000 L 502.500000 579.000000 S 512.500000 579.000000 512.500000 589.000000 L 512.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"547.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.Chunk -&gt; Model)[0]\"><path d=\"M 331.333008 229.000000 L 331.333008 360.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"365.000000\" y=\"353.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.Chunk -&gt; Model)[1]\"><path d=\"M 384.665985 229.000000 L 384.665985 360.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /></g><mask id=\"d2-4291077933\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"694\" height=\"1040\">\n<rect x=\"11\" y=\"11\" width=\"694\" height=\"1040\" fill=\"white\"></rect>\n<rect x=\"333.500000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"339.000000\" y=\"679.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"347.000000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"334.500000\" y=\"734.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"334.000000\" y=\"385.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"329.000000\" y=\"789.000000\" width=\"58\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"335.500000\" y=\"117.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"287.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"390.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"493.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"333.500000\" y=\"184.500000\" width=\"49\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Model -> org.lwjgl.opengl.GL11: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Model -> org.lwjgl.opengl.GL15: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Model -> org.lwjgl.opengl.GL20: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Model -> org.lwjgl.opengl.GL30: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.Chunk -> com.ch.Model: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.Chunk -> com.ch.Model: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\norg.lwjgl.opengl.GL15: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL11: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL30: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.Model: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.voxel.Chunk: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Model: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "b4293af3-980b-41b6-6c4b-054be751062a",
            "ancestors": [],
            "description": "Is used for managing vertex attributes and indices in a 3D rendering context. It provides methods for binding and unbinding vertex arrays, enabling and disabling attribute arrays, and loading data from an array into the model. The class also includes utility methods for creating and manipulating buffer objects and vertex array objects.",
            "name": "Model",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 73,
            "docLength": null
          },
          {
            "id": "c5b0aab1-e523-c3bc-7444-833e21bc1c82",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Binds a Vertex Array Object (VAO), enables vertex attributes, and renders a collection of triangles using `GLDrawElements`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Model model = new Model(0, 3);\n        model.draw();\n    }\n}\n",
              "description": ""
            },
            "name": "draw",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "4861d0a9-8e86-b5a5-b747-d0958e4232e4",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Enables two vertex attribute arrays using OpenGL API.",
            "params": [],
            "name": "enableAttribs",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "ae755ea4-901d-e781-e14e-58dcb4ce07c2",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Disables two vertex attributes of a graphical object using the `glDisableVertexAttribArray` method.",
            "params": [],
            "name": "disableAttribs",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "0549e9ba-1179-639b-e242-8f2f98834419",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Returs the value of the `vao` field.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer value representing the `vao` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Model model = Model.load(vertices, indices); \nint vao = model.getVAO(); \nGL30.glBindVertexArray(vao); \n",
              "description": ""
            },
            "name": "getVAO",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3b14f40f-eac6-639c-434d-c6406f2f810c",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Returns the current size of an object's internal storage.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the current size of the data structure, represented as an integer.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Model m = Model.load(float[] vertices, int[] indices);\nSystem.out.println(\"model size is \" + m.getSize());\n",
              "description": ""
            },
            "name": "getSize",
            "location": {
              "start": 42,
              "insert": 42,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e0f9b72f-7a30-a7af-514e-0a2377c904b1",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Loads a 3D model from an array of vertices and an array of indices, creates a Vulkan object and stores the data, then returns a new `Model` instance with the loaded data.",
            "params": [
              {
                "name": "vertices",
                "type_name": "float[]",
                "description": "3D model's vertices data, which is stored in an array and passed to the `storeData()` method for storage in the VAO.",
                "complex_type": false
              },
              {
                "name": "indices",
                "type_name": "int[]",
                "description": "3D model's vertex indices, which are used to bind the vertices to the appropriate geometry.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Model",
              "description": "a `Model` object representing the loaded 3D model.",
              "complex_type": false
            },
            "name": "load",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "828d5b69-d532-ffab-0140-3138a846d814",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Generates a new vertex array object (VAO) using the `glGenVertexArrays` method, binds it with `glBindVertexArray`, and returns the VAO handle.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer value representing a unique vertex array object (Vao) handle.",
              "complex_type": false
            },
            "name": "createVAO",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "3fc01406-852d-d586-fe4e-b45e4898a683",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "1) creates a new VBO, 2) binds it to store data, and 3) sets vertex attributes for 3D graphics rendering.",
            "params": [
              {
                "name": "attrib",
                "type_name": "int",
                "description": "attribute index of the data to be stored in the vertex buffer object (VBO).",
                "complex_type": false
              },
              {
                "name": "data",
                "type_name": "float[]",
                "description": "3D data to be stored in the vertex buffer object (VBO) for further rendering.",
                "complex_type": false
              }
            ],
            "name": "storeData",
            "location": {
              "start": 61,
              "insert": 61,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "bc8cca0f-0b08-dcac-9549-b46956d1847c",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Generates a new buffer object and binds it to an element array buffer slot, then stores the provided indices in the buffer using the `GL_STATIC_DRAW` mode.",
            "params": [
              {
                "name": "indices",
                "type_name": "int[]",
                "description": "3D indices of vertices in a buffer that will be stored in the element array buffer.",
                "complex_type": false
              }
            ],
            "name": "storeIndices",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "1cf1d2c2-8498-1f95-1043-77c812ca5867",
            "ancestors": [
              "b4293af3-980b-41b6-6c4b-054be751062a"
            ],
            "description": "Disconnects a Vertex Array Object (VAO) from the GPU by passing the ID of the VAO to `glBindVertexArray`.",
            "params": [],
            "name": "unbindVAO",
            "location": {
              "start": 76,
              "insert": 76,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Main.java",
    "path": "src/com/ch/Main.java",
    "content": {
      "structured": {
        "description": "A 3D rendering engine that loads a world from a text file, renders it using a shader, and updates the view based on user input. The code uses the LWJGL library for opengl integration and the JMonkeyEngine for 3D rendering. It also includes a basic physics engine for moving objects in the world.",
        "diagram": {
          "path": "src/com/ch/Main.java",
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    World []\n    PixelFormat [label=\"org.lwjgl.opengl.PixelFormat\", style=\"rounded,filled\"]\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Main [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    Mouse [label=\"org.lwjgl.input.Mouse\", style=\"rounded,filled\"]\n    ContextAttribs [label=\"org.lwjgl.opengl.ContextAttribs\", style=\"rounded,filled\"]\n    Keyboard [label=\"org.lwjgl.input.Keyboard\", style=\"rounded,filled\"]\n    DisplayMode [label=\"org.lwjgl.opengl.DisplayMode\", style=\"rounded,filled\"]\n    LWJGLException [label=\"org.lwjgl.LWJGLException\", style=\"rounded,filled\"]\n    Display [label=\"org.lwjgl.opengl.Display\", style=\"rounded,filled\"]\n    Vector3f []\n    GL11 [label=\"org.lwjgl.opengl.GL11\", style=\"rounded,filled\"]\n    Main -> Keyboard [style=\"dashed\"]\n    Main -> LWJGLException [style=\"dashed\"]\n    Main -> GL11 [style=\"dashed\"]\n    Main -> PixelFormat [style=\"dashed\"]\n    Main -> DisplayMode [style=\"dashed\"]\n    Main -> ContextAttribs [style=\"dashed\"]\n    Main -> Display [style=\"dashed\"]\n    Main -> Mouse [style=\"dashed\"]\n    Main -> Vector3f [style=\"dashed\"]\n    Main -> World [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1606 1540\"><svg id=\"d2-svg\" class=\"d2-3557019253\" width=\"1606\" height=\"1540\" viewBox=\"11 11 1606 1540\"><rect x=\"11.000000\" y=\"11.000000\" width=\"1606.000000\" height=\"1540.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-3557019253 .text {\n\tfont-family: \"d2-3557019253-font-regular\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,d09GRgABAAAAABAUAAoAAAAAGGAAAguFAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAAA9AAAAGAAAABgXd/Vo2NtYXAAAAFUAAAAmwAAAMIDpwQgZ2x5ZgAAAfAAAAlnAAAM4BnSFIhoZWFkAAALWAAAADYAAAA2G4Ue32hoZWEAAAuQAAAAJAAAACQKhAXsaG10eAAAC7QAAACkAAAAqFApCBxsb2NhAAAMWAAAAFYAAABWRnpDum1heHAAAAywAAAAIAAAACAAQgD2bmFtZQAADNAAAAMjAAAIFAbDVU1wb3N0AAAP9AAAAB0AAAAg/9EAMgADAgkBkAAFAAACigJYAAAASwKKAlgAAAFeADIBIwAAAgsFAwMEAwICBGAAAvcAAAADAAAAAAAAAABBREJPAEAAIP//Au7/BgAAA9gBESAAAZ8AAAAAAeYClAAAACAAA3icbMy5TsIAHIDxX22tV9V61fs+duMTGAcTE5NOOrsaBsLGMwFrF0LgnWD/kxBGvvEbfkikEhQyDSqlVO7Vm3efvtV+/WvrRrD8H77Ufvxp6UTELKYxiXGMYhhNDKIfvYW6qmcvEmtSmXW5DZu2bNtR2LVnX+nAoSPHTlROnTl34dKVazdu3bn34NETcwAAAP//AQAA//9xeh+1AHicjFdrTCPn1T7v68GDsQ0M9nhssLE9AzPYBgwej8dgYy/G5mqw14bdhV3Yb3fZZXfZ7LeX79toG5qozW3bVVW3SdRIuSpNf0SNmqaRspUi9UfaNLS5KImi3FStIlUikbK9hNKq2YRxNWNDIFGr/hpr9M57znme5zznGGpgFgBL+H7QgQEaoAloAJHyUu1eQeBIWZRljtHJAqLIWfQHpYTQWJiIRIje1Cepy3fcgQ7cju/fPNN/19LSSwu33qp8b+1jJYRe/xgw6ACwC5fAABSAhRQFnhc4vV5nES2cwJGvuF9yN3kaiQbPB9cXrs8m/pJE/7u4KN/S13eLModLm+dWVwEAEITLG7gFPwwugBqW56VwJCKGbAzJ8xyr19NWm00MRWRGr0eFwrcmsncV44ecXc0pf2JeDB1MBMfd3cJR094Hl08/WOj1RJzs4KVC4XKqgw13hQAAwxwADuMS1Kp5ipQYstFWPSeIoYgU5jlu7skHH33kgZmJixcvXpzApacefuRn6asrK3druc0BoOu4BEYNM9pLizRHe+k59A3l/c8+Q724NPz6yJ9Hts++reHx5VlKO3nzJi4NXx9WPtiul8cPg+ff1auWK3GSSOn16NC+e7JTV/an553djlQodVQ6f4rbY7n6rvtUtWSxNdLcNnipsPIDuumnGeWGN6DGcJc30HdwCRoAGFaQNQglSqSsev3bt/XHbVFOCk+3502n/AI3OIFeVnqjC3KlBpzEJTBpSFEiEkkLpyPpuaIOUQuv/Wn+N+dxSbmGxm4qp9HM3W9s1f0qLkFN5RsvPVdEblzavDYCW7jgb+KSyq9IiRabjREjEdkiUhwVjsgcqeN0Amez0dTc4u0mxkSYaNPK8alaHRFekVfChI7EJeUJNsOyGRYtbJ5DpzqXAw8oT6PpBwLLncqPtjk2ajxZqxxrJHMUtU3zC+NnE/ecOXN0X3H/vgVcapsZXVpUvkCjg8MjspanepEOl8AMIOp25Kl7663ZU00tFqLJSZ2aeQOXlEf7j/f3H+9HRzfPAQIGAN/EJfB+5bsdN3C6Sm+Quieu7ssYrAbCaDcezB402U2Eoakuk7+yeMzQUEuQTbVHcEl5SDotScthdFx5KLxc+bV5Dl3lx3h+jFf+H7CqIfQsWodmaFMZVkUkhzUBkYImJ5ri1ICCKiVNVC8O7P3+Q1Sgwz/u8rDH+mfzaVLH7rVxCe7ykZBpbDA/Q7mjnMfaZ/PdclB5p9/pT7HuexviQV87YCiUN9DneBUsVdUKHMlRIk1WYlm1QCrMrJ6kbTbkY8c8OjJVwN5cx+GjscPD8Vws497DeZImryuEV1884BLuOV+8lMgszeWPsZ6yk6lopbu8gZ5B6+D8T72hWkHTnpPxweVET8bhp4OuzoxQHGL7bW3evCl+IV+4EGeZiMUenIkWl1xW2eVVNRIsb6D3t2qoYKZdLkjiFliytB3onwfPxo7I/oSHKKZJnTPr2BN397UKSX7YdPfl3MVEa3Pxhc1on9OXGVKcTLAY3X8MsJb/79E62MG9qwLaqie920am82pQIWbwdCK5KM8fR1j5Zc3+YS7W4nLnXkFEsk/caxq4kMtfSKycNDsMk4doKmJtRfz4ZE7DqRUAJfHbFS/nJFkKV3HiWFrznf9JpTJjjL+xqcWZXlpCP07UTI7vN5BJ08LkkDIPADroKnvQDbQOvTAAk9sqkvgdD+1Skea0btJzrFDhoMq5botz2mqzVNuM5Stn/jF7jvc2OViLXQhN91rbzE8tUkxPPiSw5qb23oWZmfjZrH8gHgjEByLD02Jwut7b2Gyf+DCddPfZCGOH091tJqzpgDTlJ2uSjZI7nPVRxhYr0yoPdGWD6NmkJMXjkpRUrgzwbDNBWPy00K1hUwBA7+LVqhNsaVR1G02fVKGg4yZDkyOFzp72WDtefXHRGzwyr7yKfOkE3648DuUyZADgOfw85kEAAD10rABAuVx+ryzAL7T3vsr72yq6LZQ34D28WvFbXnPaLbKf6vYV6g0ESRprbaY+CZ/YvN9CIZQgiEqu+FO0rnkHJap2oSK+K2Ny+1lIkzpPNhBNNvBTnRNjhc7uSLrQGYyk0dowF+zt9IW3yphQHq8+tvBA61U8qjF24pEmddzUNiDaZbvwqOr6r2gdGqBll6539z5ttaGG2FIyuRSLn0gmT8STk5PJxNRUtSfjFwr5C/H0UnH65Mnp4hJoviKiz9F6tSe/zE5TGy8wtGWnr6iZenOBhaOxw1F2iMW3araSbPMmXsPPRZ0d954vXEq0Ns88ifRf8RUVgwW0Xt0AKlGqrlIBwDHqczGNJmuDe8iB1g50R+pGCSKUUKo7irO8ge5E6+DX+N0aqGGeF7rxdu9VIbAxrVgt4M3wAufzpAM9PV6xhU35Z3NdU84OR8TTHWjtaeHSXb6cSXDKDm+X28EydWav5IvlPEzYYvc7GRdtNHvlbiHVocW3lzdQBp9VZ42mL06SZVFr9G2dfTI1MJqty9x5p9dvbjU1WoOmuVFkTtRcuTKkrHf1GogEadTumihvoNfRmqqHXVqlqjb44eRoMdDDx1gVFzZrOjKPwsq76YQQQLNKc7ajB5C6H6CX0drXZ+ULz8wcMjJGwsjUHdr7NFpTbrSNctxoG7IqzWodAPh5tPbfzcrH7p0era0nidpGw0Q+a6BqidoGcmTq24vDhgYDUdtYl0ZrykfsEMsOscix41czquHS7e0ZTvkCENQDoJ+jNXAAiLIgMtVQskgyXHVnJcn6x+6bHTTazYTRZoztu+/R2RFzcz1htptSysfLFr/V6rcsf/r387ZOmg4w5zUcTeWghkHLTk3I8i446vFco8vUWGs1+CINxl/PHDM6jITRWrc/f40KZt7UE4O4JtbVhj5S/uYeZb2jHmTeXO/Jdqn35wDQNXy7toupI0qKRGTV0HI//L/OwebkXWn0jlTLNG7+Nl3RaHN5A/0Kf/frGuWkUGSri4TtcURXmvdG9oTH75qK9o8Ls9l0jo2JHUOuzva5aPHMnnB/PnrYJHOR1u49Et/nSXoi3mCkzRXmumYm+8ethLmYihY6K/0FT6I19T+BugMWCmhN5bv8OzwOMn5e3Z8pbb5Ugtvdbrvd7cbjLoe9tdXucAEgzVt/gtaqHrprafXY2s2UwW5usxfi79fWJHQ1Yid2bf5x/MC/AAAA//8BAAD//+5fuJQAAAEAAAACC4Un4LJjXw889QADA+gAAAAA2F2goQAAAADdZi82/jr+2whvA8gAAAADAAIAAAAAAAAAAQAAA9j+7wAACJj+Ov46CG8AAQAAAAAAAAAAAAAAAAAAACp4nBzMoW7CUBhH8fP9r122ZGbNsnRNNkMIxTQYgiIoBMnnuDwA4WF4Ct4DDQaDAIlCEmpKXUlxR5z8tGaujKAhhZZEfRDtRtSKwi78aky0K1EnogZEBQiffFlNoQ5uO3J16dud3P5JraanDKdiwqM50+BhhOsPV/p63Ra4bfgxJ1HG1I686UBiW97btpKZlXxT4dDsW+cJAAD//wEAAP//grYkegAAACwAUACAAJ4AtADIAPoBFgEwAUABcgGUAbAB6gIiAlYChAK2AuoDDAN4A5oDpgOyA84EAAQiBE4EggSiBOIFCAUqBUYFgAWsBdwF9AYyBj4GVAZwAAAAAQAAACoAjAAMAGYABwABAAAAAAAAAAAAAAAAAAQAA3icnJTdThtXFIU/B9ttVDUXFYrIDTqXbZWM3QiiBK5MCYpVhFOP0x+pqjR4xj9iPDPyDFCqPkCv+xZ9i1z1OfoQVa+rs7wNNqoUgRCwzpy991lnr7UPsMm/bFCrPwT+av5guMZ2c8/wAx41nxre4Ljxt+H6SkyDuPGb4SZfNvqGP+J9/Q/DH7NT/9nwQ7bqR4Y/4Xl90/CnG45/DD9ih/cLXIOX/G64xhaF4Qds8pPhDR5jNWt1HtM23OAztg032QYGTKlImZIxxjFiyphz5iSUhCTMmTIiIcbRpUNKpa8ZkZBj/L9fI0Iq5kSqOKHCkRKSElEysYq/KivnrU4caTW3vQ4VEyJOlXFGRIYjZ0xORsKZ6lRUFOzRokXJUHwLKkoCSqakBOTMGdOixxHHDJgwpcRxpEqeWUjOiIpLIp3vLMJ3ZkhCRmmszsmIxdOJX6LsLsc4ehSKXa18vFbhKY7vlO255Yr9ikC/boXZ+rlLNhEX6meqrqTauZSCE+36czt8K1yxh7tXf9aZfLhHsf5XqnzKufSPpVQmJhnObdEhlINC9wTHgdZdQnXke7oMeEOPdwy07tCnT4cTBnR5rdwefRxf0+OEQ2V0hRd7R3LMCT/i+IauYnztxPqzUCzhFwpzdymOc91jRqGee+aB7prohndX2M9QvuaOUjlDzZGPdNIv05xFjM0VhRjO1MulN0rrX2yOmOkuXtubfT8NFzZ7yym+ItcMe7cuOHnlFow+pGpwyzOX+gmIiMk5VcSQnBktKq7E+y0R56Q4DtW9N5qSis51jj/nSi5JmIlBl0x15hT6G5lvQuM+XPO9s7ckVr5nenZ9q/uc4tSrG43eqXvLvdC6nKwo0DJV8xU3DcU1M+8nmqlV/qFyS71uOc/ok0j1VDe4/Q48J6DNDrvsM9E5Q+1c2BvR1jvR5hX76sEZiaJGcnViFXYJeMEuu7zixVrNDocc0GP/DhwXWT0OeH1rZ12nZRVndf4Um7b4Op5dr17eW6/P7+DLLzRRNy9jX9r4bl9YtRv/nxAx81zc1uqd3BOC/wAAAP//AQAA//8HW0wwAHicYmBmAIP/5xiMGLAAAAAAAP//AQAA//8vAQIDAAAA\");\n}\n.d2-3557019253 .text-italic {\n\tfont-family: \"d2-3557019253-font-italic\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3557019253 .text-mono {\n\tfont-family: \"d2-3557019253-font-mono\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3557019253 .text-mono-bold {\n\tfont-family: \"d2-3557019253-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-3557019253 .fill-N1{fill:#ECEDED;}\n\t\t.d2-3557019253 .fill-N2{fill:#676C7E;}\n\t\t.d2-3557019253 .fill-N3{fill:#9499AB;}\n\t\t.d2-3557019253 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-3557019253 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-3557019253 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-3557019253 .fill-N7{fill:#151719;}\n\t\t.d2-3557019253 .fill-B1{fill:#717D86;}\n\t\t.d2-3557019253 .fill-B2{fill:#717D86;}\n\t\t.d2-3557019253 .fill-B3{fill:#ffff00;}\n\t\t.d2-3557019253 .fill-B4{fill:#151719;}\n\t\t.d2-3557019253 .fill-B5{fill:#151719;}\n\t\t.d2-3557019253 .fill-B6{fill:#151719;}\n\t\t.d2-3557019253 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-3557019253 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-3557019253 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-3557019253 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-3557019253 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-3557019253 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-3557019253 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-3557019253 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-3557019253 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-3557019253 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-3557019253 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-3557019253 .stroke-N7{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-B1{stroke:#717D86;}\n\t\t.d2-3557019253 .stroke-B2{stroke:#717D86;}\n\t\t.d2-3557019253 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-3557019253 .stroke-B4{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-B5{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-B6{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-3557019253 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-3557019253 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-3557019253 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-3557019253 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-3557019253 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-3557019253 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-3557019253 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-3557019253 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-3557019253 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-3557019253 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-3557019253 .background-color-N7{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-B1{background-color:#717D86;}\n\t\t.d2-3557019253 .background-color-B2{background-color:#717D86;}\n\t\t.d2-3557019253 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-3557019253 .background-color-B4{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-B5{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-B6{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-3557019253 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-3557019253 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-3557019253 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-3557019253 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-3557019253 .color-N1{color:#ECEDED;}\n\t\t.d2-3557019253 .color-N2{color:#676C7E;}\n\t\t.d2-3557019253 .color-N3{color:#9499AB;}\n\t\t.d2-3557019253 .color-N4{color:#CFD2DD;}\n\t\t.d2-3557019253 .color-N5{color:#DEE1EB;}\n\t\t.d2-3557019253 .color-N6{color:#EEF1F8;}\n\t\t.d2-3557019253 .color-N7{color:#151719;}\n\t\t.d2-3557019253 .color-B1{color:#717D86;}\n\t\t.d2-3557019253 .color-B2{color:#717D86;}\n\t\t.d2-3557019253 .color-B3{color:#ffff00;}\n\t\t.d2-3557019253 .color-B4{color:#151719;}\n\t\t.d2-3557019253 .color-B5{color:#151719;}\n\t\t.d2-3557019253 .color-B6{color:#151719;}\n\t\t.d2-3557019253 .color-AA2{color:#ECEDED;}\n\t\t.d2-3557019253 .color-AA4{color:#CFD2DD;}\n\t\t.d2-3557019253 .color-AA5{color:#DEE1EB;}\n\t\t.d2-3557019253 .color-AB4{color:#CFD2DD;}\n\t\t.d2-3557019253 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"418.000000\" y=\"12.000000\" width=\"861.000000\" height=\"872.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"848.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"1174.000000\" width=\"1604.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"814.000000\" y=\"1207.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"468.000000\" y=\"62.000000\" width=\"761.000000\" height=\"767.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"848.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"1229.000000\" width=\"1504.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"814.000000\" y=\"1258.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Main\"><g class=\"shape\" ><rect x=\"518.000000\" y=\"112.000000\" width=\"400.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"718.000000\" y=\"150.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Main</text></g><g id=\"org.lwjgl.LWJGLException\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"1284.000000\" width=\"178.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"201.000000\" y=\"1322.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">LWJGLException</text></g><g id=\"org.lwjgl.input\"><g class=\"shape\" ><rect x=\"310.000000\" y=\"1284.000000\" width=\"334.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"477.000000\" y=\"1309.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">input</text></g><g id=\"org.lwjgl.opengl\"><g class=\"shape\" ><rect x=\"664.000000\" y=\"1284.000000\" width=\"852.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"1090.000000\" y=\"1309.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">opengl</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"743.000000\" y=\"613.000000\" width=\"223.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"854.500000\" y=\"638.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"986.000000\" y=\"613.000000\" width=\"193.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"1082.500000\" y=\"638.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"org.lwjgl.input.Keyboard\"><g class=\"shape\" ><rect x=\"360.000000\" y=\"1334.000000\" width=\"121.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"420.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Keyboard</text></g><g id=\"org.lwjgl.input.Mouse\"><g class=\"shape\" ><rect x=\"501.000000\" y=\"1334.000000\" width=\"93.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"547.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Mouse</text></g><g id=\"org.lwjgl.opengl.ContextAttribs\"><g class=\"shape\" ><rect x=\"714.000000\" y=\"1334.000000\" width=\"179.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"803.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">ContextAttribs</text></g><g id=\"org.lwjgl.opengl.Display\"><g class=\"shape\" ><rect x=\"913.000000\" y=\"1334.000000\" width=\"112.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"969.000000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Display</text></g><g id=\"org.lwjgl.opengl.DisplayMode\"><g class=\"shape\" ><rect x=\"1045.000000\" y=\"1334.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1119.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">DisplayMode</text></g><g id=\"org.lwjgl.opengl.GL11\"><g class=\"shape\" ><rect x=\"1214.000000\" y=\"1334.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1255.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL11</text></g><g id=\"org.lwjgl.opengl.PixelFormat\"><g class=\"shape\" ><rect x=\"1317.000000\" y=\"1334.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1391.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">PixelFormat</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"793.000000\" y=\"663.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"854.500000\" y=\"701.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"com.ch.voxel.World\"><g class=\"shape\" ><rect x=\"1036.000000\" y=\"663.000000\" width=\"93.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"1082.500000\" y=\"701.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">World</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.LWJGLException)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 537.112976 179.000000 L 537.112976 919.000000 S 537.112976 929.000000 527.112976 929.000000 L 211.000000 929.000000 S 201.000000 929.000000 201.000000 939.000000 L 201.000000 1280.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"235.000000\" y=\"1274.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.input.Keyboard)[0]\"><path d=\"M 560.794983 179.000000 L 560.794983 969.000000 S 560.794983 979.000000 550.794983 979.000000 L 430.500000 979.000000 S 420.500000 979.000000 420.500000 989.000000 L 420.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"455.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.input.Mouse)[0]\"><path d=\"M 584.476990 179.000000 L 584.476990 1019.000000 S 584.476990 1029.000000 574.476990 1029.000000 L 557.500000 1029.000000 S 547.500000 1029.000000 547.500000 1039.000000 L 547.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"582.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.ContextAttribs)[0]\"><path d=\"M 608.158997 179.000000 L 608.158997 1119.000000 S 608.158997 1129.000000 618.158997 1129.000000 L 793.500000 1129.000000 S 803.500000 1129.000000 803.500000 1139.000000 L 803.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"838.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.Display)[0]\"><path d=\"M 631.840027 179.000000 L 631.840027 1069.000000 S 631.840027 1079.000000 641.840027 1079.000000 L 959.000000 1079.000000 S 969.000000 1079.000000 969.000000 1089.000000 L 969.000000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1003.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.DisplayMode)[0]\"><path d=\"M 655.521973 179.000000 L 655.521973 1019.000000 S 655.521973 1029.000000 665.521973 1029.000000 L 1109.500000 1029.000000 S 1119.500000 1029.000000 1119.500000 1039.000000 L 1119.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1154.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.GL11)[0]\"><path d=\"M 679.203979 179.000000 L 679.203979 969.000000 S 679.203979 979.000000 689.203979 979.000000 L 1245.500000 979.000000 S 1255.500000 979.000000 1255.500000 989.000000 L 1255.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1290.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.PixelFormat)[0]\"><path d=\"M 702.885986 179.000000 L 702.885986 919.000000 S 702.885986 929.000000 712.885986 929.000000 L 1381.500000 929.000000 S 1391.500000 929.000000 1391.500000 939.000000 L 1391.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1426.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Main -&gt; math.Vector3f)[0]\"><path d=\"M 855.385986 179.000000 L 855.385986 660.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"889.000000\" y=\"653.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Main -&gt; voxel.World)[0]\"><path d=\"M 882.567993 179.000000 L 882.567993 208.000000 S 882.567993 218.000000 892.567993 218.000000 L 1073.385986 218.000000 S 1083.385986 218.000000 1083.385986 228.000000 L 1083.385986 660.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1117.000000\" y=\"653.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><mask id=\"d2-3557019253\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"1606\" height=\"1540\">\n<rect x=\"11\" y=\"11\" width=\"1606\" height=\"1540\" fill=\"white\"></rect>\n<rect x=\"824.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"795.000000\" y=\"1179.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"837.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"790.500000\" y=\"1234.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"699.000000\" y=\"134.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"134.500000\" y=\"1306.500000\" width=\"133\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"454.500000\" y=\"1289.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1061.000000\" y=\"1289.000000\" width=\"58\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"833.000000\" y=\"618.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1060.000000\" y=\"618.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"382.500000\" y=\"1356.500000\" width=\"76\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"523.500000\" y=\"1356.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"736.500000\" y=\"1356.500000\" width=\"134\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"935.500000\" y=\"1356.500000\" width=\"67\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1067.500000\" y=\"1356.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1236.500000\" y=\"1356.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1339.500000\" y=\"1356.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"815.500000\" y=\"685.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1058.500000\" y=\"685.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Main -> org.lwjgl.LWJGLException: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.input.Keyboard: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.input.Mouse: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.ContextAttribs: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.Display: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.DisplayMode: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.GL11: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.PixelFormat: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> com.ch.math.Vector3f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> com.ch.voxel.World: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\norg.lwjgl.input.Keyboard: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL11: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.Display: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.input.Mouse: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.ContextAttribs: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.DisplayMode: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.PixelFormat: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.LWJGLException: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.Main: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.voxel.World: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Vector3f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Main: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "b62f76d5-91da-3f83-1340-02563cfde523",
            "ancestors": [],
            "description": "Is responsible for handling the graphics rendering and user input in a 3D environment. It creates a Camera3D object to handle the camera movement, loads a shader and texture, and creates a World object to represent the game world. The loop method updates the camera position and renders the scene using the shader and texture. The update method handles user input and updates the world position accordingly. Finally, the render method draws the 3D model using the shader and texture.",
            "name": "Main",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 123,
            "docLength": null
          },
          {
            "id": "319ce874-d558-18bc-304f-60ebab1b5e8b",
            "ancestors": [
              "b62f76d5-91da-3f83-1340-02563cfde523"
            ],
            "description": "Initializes displays and GL libraries, enters an infinite loop for rendering, and exits with a status code of 0.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "program's command-line arguments, which can be used to \ncustomize the program's behavior when it is executed.",
                "complex_type": false
              }
            ],
            "name": "main",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "452e7cda-37a3-efac-3443-625032aee969",
            "ancestors": [
              "b62f76d5-91da-3f83-1340-02563cfde523"
            ],
            "description": "Sets up a display mode with a resolution of 1920x1080, creates a display context with forward compatibility and VSync enabled, and prints the version of the GL library.",
            "params": [],
            "name": "initDisplay",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "d572cb87-c4fc-08b7-354c-e95b62ce3865",
            "ancestors": [
              "b62f76d5-91da-3f83-1340-02563cfde523"
            ],
            "description": "Initializes a 3D graphics context (GL) for rendering a 3D scene. It sets up the camera, loads a shader, and creates a texture and a mesh for rendering.",
            "params": [],
            "name": "initGL",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "cda739c5-00ac-afa7-0143-a84c452d0f67",
            "ancestors": [
              "b62f76d5-91da-3f83-1340-02563cfde523"
            ],
            "description": "Runs an infinite loop that displays a title and updates a counter every frame, while also rendering graphics and handling keyboard input.",
            "params": [],
            "name": "loop",
            "location": {
              "start": 86,
              "insert": 86,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "a7c67f38-7a96-a991-484b-76f247e3102c",
            "ancestors": [
              "b62f76d5-91da-3f83-1340-02563cfde523"
            ],
            "description": "Updates an object's position based on input and transform changes, using `processInput()` and `updatePos()`.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "duration of time that has passed since the last update, which is used to calculate the position of the game object based on its velocity and other factors.",
                "complex_type": false
              }
            ],
            "name": "update",
            "location": {
              "start": 108,
              "insert": 108,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "c64c05ca-9a5a-f5ae-5e42-e75438ec1801",
            "ancestors": [
              "b62f76d5-91da-3f83-1340-02563cfde523"
            ],
            "description": "Is responsible for rendering 3D models using a renderer object `s`. It first enables and binds the renderer, then applies transformations to the model matrices using the `MVP` matrix, and finally draws the models.",
            "params": [],
            "name": "render",
            "location": {
              "start": 113,
              "insert": 113,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "63ed9e79-491a-bbb5-3e4f-60dd1a4c4c22",
            "ancestors": [
              "b62f76d5-91da-3f83-1340-02563cfde523"
            ],
            "description": "Terminates the Java application by calling the `System.exit()` method with the specified status code, which is an integer value representing the exit code.",
            "params": [
              {
                "name": "status",
                "type_name": "int",
                "description": "exit code to be returned by the `System.exit()` method, indicating the outcome of the program's execution.",
                "complex_type": false
              }
            ],
            "name": "exit",
            "location": {
              "start": 134,
              "insert": 134,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Matrix4f.java",
    "path": "src/com/ch/math/Matrix4f.java",
    "content": {
      "structured": {
        "description": "A Matrix4f class with various static factory methods for creating different types of matrices, such as identity, translation, rotation, and orthographic projection matrices. The class also provides methods for transforming vectors using the matrix, getting the matrix data in various forms, and setting/getting individual elements of the matrix.",
        "diagram": {
          "path": "src/com/ch/math/Matrix4f.java",
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    Shader []\n    Camera3D []\n    Camera []\n    Transform []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Matrix4f [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    Quaternion []\n    CameraStruct []\n    Vector3f []\n    Chunk []\n    Transform -> Matrix4f [style=\"dashed\"]\n    Matrix4f -> Shader [penwidth=1]\n    Camera3D -> Matrix4f [penwidth=2]\n    CameraStruct -> Matrix4f [penwidth=2]\n    Matrix4f -> Camera [dir=\"both\", penwidth=6]\n    Quaternion -> Matrix4f [dir=\"both\", penwidth=2]\n    Vector3f -> Matrix4f [dir=\"both\", penwidth=12]\n    Chunk -> Matrix4f [penwidth=1]\n    Camera3D -> Matrix4f [style=\"dashed\"]\n    Shader -> Matrix4f [style=\"dashed\"]\n    Chunk -> Matrix4f [style=\"dashed\"]\n    Camera -> Matrix4f [style=\"dashed\"]\n    Transform -> Matrix4f [penwidth=2]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1059 1221\"><svg id=\"d2-svg\" class=\"d2-2816740959\" width=\"1059\" height=\"1221\" viewBox=\"11 11 1059 1221\"><rect x=\"11.000000\" y=\"11.000000\" width=\"1059.000000\" height=\"1221.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-2816740959 .text {\n\tfont-family: \"d2-2816740959-font-regular\";\n}\n@font-face {\n\tfont-family: d2-2816740959-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-2816740959 .text-italic {\n\tfont-family: \"d2-2816740959-font-italic\";\n}\n@font-face {\n\tfont-family: d2-2816740959-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-2816740959 .text-mono {\n\tfont-family: \"d2-2816740959-font-mono\";\n}\n@font-face {\n\tfont-family: d2-2816740959-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-2816740959 .text-mono-bold {\n\tfont-family: \"d2-2816740959-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-2816740959-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-2816740959 .fill-N1{fill:#ECEDED;}\n\t\t.d2-2816740959 .fill-N2{fill:#676C7E;}\n\t\t.d2-2816740959 .fill-N3{fill:#9499AB;}\n\t\t.d2-2816740959 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-2816740959 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-2816740959 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-2816740959 .fill-N7{fill:#151719;}\n\t\t.d2-2816740959 .fill-B1{fill:#717D86;}\n\t\t.d2-2816740959 .fill-B2{fill:#717D86;}\n\t\t.d2-2816740959 .fill-B3{fill:#ffff00;}\n\t\t.d2-2816740959 .fill-B4{fill:#151719;}\n\t\t.d2-2816740959 .fill-B5{fill:#151719;}\n\t\t.d2-2816740959 .fill-B6{fill:#151719;}\n\t\t.d2-2816740959 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-2816740959 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-2816740959 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-2816740959 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-2816740959 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-2816740959 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-2816740959 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-2816740959 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-2816740959 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-2816740959 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-2816740959 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-2816740959 .stroke-N7{stroke:#151719;}\n\t\t.d2-2816740959 .stroke-B1{stroke:#717D86;}\n\t\t.d2-2816740959 .stroke-B2{stroke:#717D86;}\n\t\t.d2-2816740959 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-2816740959 .stroke-B4{stroke:#151719;}\n\t\t.d2-2816740959 .stroke-B5{stroke:#151719;}\n\t\t.d2-2816740959 .stroke-B6{stroke:#151719;}\n\t\t.d2-2816740959 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-2816740959 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-2816740959 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-2816740959 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-2816740959 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-2816740959 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-2816740959 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-2816740959 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-2816740959 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-2816740959 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-2816740959 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-2816740959 .background-color-N7{background-color:#151719;}\n\t\t.d2-2816740959 .background-color-B1{background-color:#717D86;}\n\t\t.d2-2816740959 .background-color-B2{background-color:#717D86;}\n\t\t.d2-2816740959 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-2816740959 .background-color-B4{background-color:#151719;}\n\t\t.d2-2816740959 .background-color-B5{background-color:#151719;}\n\t\t.d2-2816740959 .background-color-B6{background-color:#151719;}\n\t\t.d2-2816740959 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-2816740959 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-2816740959 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-2816740959 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-2816740959 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-2816740959 .color-N1{color:#ECEDED;}\n\t\t.d2-2816740959 .color-N2{color:#676C7E;}\n\t\t.d2-2816740959 .color-N3{color:#9499AB;}\n\t\t.d2-2816740959 .color-N4{color:#CFD2DD;}\n\t\t.d2-2816740959 .color-N5{color:#DEE1EB;}\n\t\t.d2-2816740959 .color-N6{color:#EEF1F8;}\n\t\t.d2-2816740959 .color-N7{color:#151719;}\n\t\t.d2-2816740959 .color-B1{color:#717D86;}\n\t\t.d2-2816740959 .color-B2{color:#717D86;}\n\t\t.d2-2816740959 .color-B3{color:#ffff00;}\n\t\t.d2-2816740959 .color-B4{color:#151719;}\n\t\t.d2-2816740959 .color-B5{color:#151719;}\n\t\t.d2-2816740959 .color-B6{color:#151719;}\n\t\t.d2-2816740959 .color-AA2{color:#ECEDED;}\n\t\t.d2-2816740959 .color-AA4{color:#CFD2DD;}\n\t\t.d2-2816740959 .color-AA5{color:#DEE1EB;}\n\t\t.d2-2816740959 .color-AB4{color:#CFD2DD;}\n\t\t.d2-2816740959 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"12.000000\" width=\"1057.000000\" height=\"1219.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"540.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"62.000000\" width=\"957.000000\" height=\"1119.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"540.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"com.ch.Camera\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"212.000000\" width=\"102.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"163.000000\" y=\"250.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Camera</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"321.000000\" y=\"468.000000\" width=\"617.000000\" height=\"512.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"629.500000\" y=\"493.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.Camera3D\"><g class=\"shape\" ><rect x=\"234.000000\" y=\"212.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"295.500000\" y=\"250.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Camera3D</text></g><g id=\"com.ch.Shader\"><g class=\"shape\" ><rect x=\"815.000000\" y=\"1065.000000\" width=\"102.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"866.000000\" y=\"1103.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Shader</text></g><g id=\"com.ch.Transform\"><g class=\"shape\" ><rect x=\"377.000000\" y=\"212.000000\" width=\"132.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"443.000000\" y=\"250.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Transform</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"579.000000\" y=\"112.000000\" width=\"194.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"676.000000\" y=\"137.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"com.ch.CameraStruct\"><g class=\"shape\" ><rect x=\"793.000000\" y=\"212.000000\" width=\"160.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"873.000000\" y=\"250.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">CameraStruct</text></g><g id=\"com.ch.math.Matrix4f\"><g class=\"shape\" ><rect x=\"448.000000\" y=\"864.000000\" width=\"440.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"668.000000\" y=\"902.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Matrix4f</text></g><g id=\"com.ch.voxel.Chunk\"><g class=\"shape\" ><rect x=\"629.000000\" y=\"162.000000\" width=\"94.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"676.000000\" y=\"200.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Chunk</text></g><g id=\"com.ch.math.Quaternion\"><g class=\"shape\" ><rect x=\"445.000000\" y=\"518.000000\" width=\"141.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"515.500000\" y=\"556.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Quaternion</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"606.000000\" y=\"518.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"667.500000\" y=\"556.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"com.ch.(Camera -&gt; math.Matrix4f)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 180.000000 279.000000 L 180.000000 814.000000 S 180.000000 824.000000 190.000000 824.000000 L 474.750000 824.000000 S 484.750000 824.000000 484.750000 834.000000 L 484.750000 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /><text x=\"519.000000\" y=\"854.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Matrix4f)[0]\"><path d=\"M 275.000000 279.000000 L 275.000000 764.000000 S 275.000000 774.000000 285.000000 774.000000 L 511.416016 774.000000 S 521.416016 774.000000 521.416016 784.000000 L 521.416016 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /><text x=\"555.000000\" y=\"854.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Shader -&gt; math.Matrix4f)[0]\"><path d=\"M 883.166016 1064.000000 L 883.166016 1035.000000 S 883.166016 1025.000000 893.166016 1025.000000 L 958.083008 1025.000000 S 968.083008 1025.000000 968.083008 1015.000000 L 968.083008 433.000000 S 968.083008 423.000000 958.083008 423.000000 L 861.416016 423.000000 S 851.416016 423.000000 851.416016 433.000000 L 851.416016 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /><text x=\"885.000000\" y=\"854.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Transform -&gt; math.Matrix4f)[0]\"><path d=\"M 404.583008 279.000000 L 404.583008 664.000000 S 404.583008 674.000000 414.583008 674.000000 L 584.750000 674.000000 S 594.750000 674.000000 594.750000 684.000000 L 594.750000 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /><text x=\"629.000000\" y=\"854.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.Chunk -&gt; math.Matrix4f)[0]\"><path d=\"M 660.750000 229.000000 L 660.750000 363.000000 S 660.750000 373.000000 670.750000 373.000000 L 770.583008 373.000000 S 780.583008 373.000000 780.583008 383.000000 L 780.583008 664.000000 S 780.583008 674.000000 770.583008 674.000000 L 751.416016 674.000000 S 741.416016 674.000000 741.416016 684.000000 L 741.416016 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /><text x=\"775.000000\" y=\"854.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Matrix4f)[1]\"><path d=\"M 316.000000 279.000000 L 316.000000 714.000000 S 316.000000 724.000000 326.000000 724.000000 L 548.083008 724.000000 S 558.083008 724.000000 558.083008 734.000000 L 558.083008 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><g id=\"com.ch.(CameraStruct -&gt; math.Matrix4f)[0]\"><path d=\"M 814.750000 279.000000 L 814.750000 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><g id=\"com.ch.(Transform -&gt; math.Matrix4f)[1]\"><path d=\"M 465.000000 279.000000 L 465.000000 413.000000 S 465.000000 423.000000 475.000000 423.000000 L 759.583008 423.000000 S 769.583008 423.000000 769.583008 433.000000 L 769.583008 614.000000 S 769.583008 624.000000 759.583008 624.000000 L 714.750000 624.000000 S 704.750000 624.000000 704.750000 634.000000 L 704.750000 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><g id=\"com.ch.(math.Matrix4f &lt;-&gt; Camera)[0]\"><marker id=\"mk-3695359059\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"3.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"10.000000,0.000000 0.000000,6.000000 10.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 594.750000 933.000000 L 594.750000 1015.000000 S 594.750000 1025.000000 584.750000 1025.000000 L 156.000000 1025.000000 S 146.000000 1025.000000 146.000000 1015.000000 L 146.000000 281.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><g id=\"com.ch.(math.Matrix4f -&gt; Shader)[0]\"><path d=\"M 849.166016 931.000000 L 849.166016 1062.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><g id=\"com.ch.math.(Quaternion &lt;-&gt; Matrix4f)[0]\"><path d=\"M 516.083008 587.000000 L 516.083008 614.000000 S 516.083008 624.000000 526.083008 624.000000 L 621.416016 624.000000 S 631.416016 624.000000 631.416016 634.000000 L 631.416016 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><g id=\"com.ch.math.(Vector3f &lt;-&gt; Matrix4f)[0]\"><path d=\"M 668.083008 587.000000 L 668.083008 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><g id=\"com.ch.(voxel.Chunk -&gt; math.Matrix4f)[1]\"><path d=\"M 692.083008 229.000000 L 692.083008 313.000000 S 692.083008 323.000000 702.083008 323.000000 L 781.583008 323.000000 S 791.583008 323.000000 791.583008 333.000000 L 791.583008 861.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2816740959)\" /></g><mask id=\"d2-2816740959\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"1059\" height=\"1221\">\n<rect x=\"11\" y=\"11\" width=\"1059\" height=\"1221\" fill=\"white\"></rect>\n<rect x=\"516.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"529.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"134.500000\" y=\"234.500000\" width=\"57\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"608.000000\" y=\"473.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"256.500000\" y=\"234.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"837.500000\" y=\"1087.500000\" width=\"57\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"399.500000\" y=\"234.500000\" width=\"87\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"653.500000\" y=\"117.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"815.500000\" y=\"234.500000\" width=\"115\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"629.000000\" y=\"886.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"651.500000\" y=\"184.500000\" width=\"49\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"467.500000\" y=\"540.500000\" width=\"96\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"628.500000\" y=\"540.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Camera -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Transform -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.Chunk -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.CameraStruct -> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Transform -> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Matrix4f <-> com.ch.Camera: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Matrix4f -> com.ch.Shader: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Quaternion <-> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Vector3f <-> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.voxel.Chunk -> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.CameraStruct: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.voxel.Chunk: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Transform: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Camera3D: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Vector3f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Quaternion: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Camera: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Shader: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Matrix4f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Matrix4f: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "fce3a915-5511-d5bb-ad46-b9d1383bd86b",
            "ancestors": [],
            "description": "Is a representation of a 4x4 matrix, providing methods for initialization, transformation, multiplication with other matrices, and accessing linear data. It also provides methods for setting individual elements and transposing the matrix.",
            "name": "Matrix4f",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 291,
            "docLength": null
          },
          {
            "id": "bc992166-8e59-fdaa-2a4b-0b081ae05be1",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Sets the elements of a matrix to identity values, making it the identity matrix.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix with identity values for all elements.\n\nThe `Matrix4f` object returned by the function is an instance of the `Matrix4f` class, which represents a 4x4 homogeneous transformation matrix.\n\nAll elements of the matrix are set to their default or identity values, indicating that the matrix has not been transformed yet.\n\nTherefore, the output of the function is a blank slate for further transformations, allowing users to apply arbitrary transformations to the matrix without any pre-existing values affecting the result.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    Matrix4f mat = new Matrix4f();\n    mat.initIdentity();\n}\n",
              "description": "\nThis code will set the matrix to the identity matrix."
            },
            "name": "initIdentity",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "2da8202c-a272-5ab8-6c44-94d7cc4cfc9e",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Sets the translation components (x, y, z) for a matrix. It updates the matrix's data elements accordingly.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D translation component along the x-axis in the returned matrix.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2nd coordinate of the translation vector, which is added to the corresponding element in the matrix's data array.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3rd coordinate of the translation vector, which is used to set the z-component of the matrix's data array.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a modified version of the original matrix, with elements representing the translation vectors for x, y, and z.\n\n1. The object returned by the function is an instance of the `Matrix4f` class, indicating that it is a 4x4 homogeneous transformation matrix.\n2. The elements of the matrix have been modified to represent a translation in the x, y, and z directions, respectively. Specifically, the element at position (0, 0) has been set to 1, while the elements at positions (0, 1), (1, 0), (0, 2), and (1, 1) have been set to the corresponding translation values in the x, y, and z directions.\n3. The remaining elements of the matrix have been left unchanged, indicating that the transformation is a pure translation without any other manipulation of the input matrix.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\n\tfloat x = 10;\n\tfloat y = -20;\n\tfloat z = 30;\n\tm.initTranslation(x, y, z);\n",
              "description": "\nThis would initialize a translation matrix with the given values and store them in the data field of the Matrix4f class. The x value is negated because it was initially passed to this function as -10 while in the initTranslation method the x value was stored without being negated."
            },
            "name": "initTranslation",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "f0b3e61e-4c72-3ebc-ad49-5540e1ef8fe3",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Initializes a rotation matrix based on three Euler angles (`x`, `y`, and `z`). It returns a new rotation matrix object.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D rotation around the x-axis, which is applied to the resulting matrix through the multiplication operation.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D rotation angle around the z-axis, which is used to calculate the rotated matrix.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3D rotation axis around which the rotation is performed, and its value determines the angle of the rotation about that axis.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a new Matrix4f object representing the rotation matrix based on the given x, y, and z angles.\n\n* `data`: A 16x4 floating-point matrix representing the rotation matrix. The elements of the matrix represent the rotations around the three axes (x, y, and z) respectively.\n* Each row of the matrix represents a rotation around one of the axes, with the first column representing the x-axis rotation, the second column representing the y-axis rotation, and the third column representing the z-axis rotation.\n* The elements of each row are arranged in a 4x4 grid, with the top-left element representing the amount of rotation around that axis, and the bottom-right element representing the angle of rotation (in radians).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    Matrix4f r = new Matrix4f();\n    float x = 90;\n    float y = 180;\n    float z = 270;\n    r.initRotation(x, y, z);\n}\n",
              "description": "\nIn this example the method initRotation is called with the parameters (90, 180, 270), which represent an x-axis rotation of 90 degrees, a y-axis rotation of 180 degrees, and a z-axis rotation of 270 degrees. The method then multiplies these rotations together to produce the final 4x4 matrix representing the transformations required for rotating an object in space by 90, 180, and 270 degrees around each axis.\n\nThe result of this code is a 4x4 matrix that represents the rotation transformation necessary to rotate an object 90, 180, and 270 degrees around the x, y, and z axes respectively."
            },
            "name": "initRotation",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 64,
            "docLength": null
          },
          {
            "id": "cfd68aaa-0f59-75b1-d242-33408c49f60a",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Sets the scale factors for a matrix, where the x, y, and z components of the returned matrix represent the scale factors along the corresponding axes.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D scaling factor along the x-axis of the matrix.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D scaling factor for the x-axis of the matrix.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3rd coordinate of the scaling vector, which is applied to the matrix's second row.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a matrix with the given scale factors applied to each component.\n\n* The returned object is a matrix with four elements.\n* Each element in the matrix represents a scaling factor for one of the coordinate axes (x, y, or z).\n* The values of the elements are set to the input parameters passed to the function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f matrix = new Matrix4f();\nmatrix.initScale(2, 3, 5);\n",
              "description": "\nIn this case, the `data` field of the `matrix` object will have the following values:\n"
            },
            "name": "initScale",
            "location": {
              "start": 119,
              "insert": 119,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "c29c2d32-d709-199e-c04b-f5ebcc65ff70",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Initializes a Matrix4f object for a perspective projection, with aspect ratio and field of view specified by the caller. It sets the elements of the matrix accordingly.",
            "params": [
              {
                "name": "fov",
                "type_name": "float",
                "description": "Field of View (FOV) of the perspective projection, which determines the angle of the visible hemisphere in radians.",
                "complex_type": false
              },
              {
                "name": "aspectRatio",
                "type_name": "float",
                "description": "2D aspect ratio of the viewport, which is used to scale the perspective projection matrix accordingly.",
                "complex_type": false
              },
              {
                "name": "zNear",
                "type_name": "float",
                "description": "near plane distance of the perspective projection, which is used to calculate the z-range for the matrix.",
                "complex_type": false
              },
              {
                "name": "zFar",
                "type_name": "float",
                "description": "far distance of the perspective projection, which is used to calculate the corresponding z-value for the near distance in the returned matrix.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a matrix that represents the perspective projection of a 3D scene.\n\n* The matrix has four elements, representing the homogeneous coordinates for each point in the image plane.\n* The data array has dimensions 4x4, where each element is a floating-point value between 0 and 1.\n* The matrix is used to transform 3D points from world space to image space, with the perspective transformation applied.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "float aspectRatio = 16f / 9f;\nMatrix4f projection = new Matrix4f();\nprojection.initPerspective(45, aspectRatio, 0.1f, 100);\n",
              "description": "\nThis code creates a perspective matrix with a fov of 45 degrees, an aspect ratio of 16:9, and near and far plane values of 0.1 and 100 respectively. The resulting projection matrix can then be used to transform objects in 3D space by multiplying it by their transformation matrices.\n\nThe first argument of the initPerspective method is a float variable representing the field of view (FOV) of the camera. The FOV is an angle that represents the maximum angle between two points on the near plane and the camera's position. A smaller FOV will result in a more zoomed-in projection, while a larger FOV will result in a more zoomed-out projection.\nThe second argument is also a float variable representing the aspect ratio of the screen. This value should be set to the width of the screen divided by its height.\nThe third and fourth arguments are two floats that represent the near and far plane values, respectively. These values determine how far away objects can be in 3D space before they are clipped or discarded by the projection matrix. Setting these values to 0.1f and 100, respectively, will result in objects being completely clipped if they are more than 100 units away from the camera and completely visible if they are less than 0.1 units away.\n\nThe resulting projection matrix can then be used to transform objects in 3D space by multiplying it by their transformation matrices. For example, to transform a cube in 3D space with a position of (5, 6, -7), we would apply the following transformations:\n"
            },
            "name": "initPerspective",
            "location": {
              "start": 140,
              "insert": 140,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "b1a500ba-781e-0f97-9741-b0d460510575",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Initializes a matrix for orthographic projection with specified dimensions and near and far distances. It sets the matrix elements to facilitate perspective transformation.",
            "params": [
              {
                "name": "left",
                "type_name": "float",
                "description": "left coordinate of the orthographic projection, which is used to determine the scale factor for the x-axis of the projection matrix.",
                "complex_type": false
              },
              {
                "name": "right",
                "type_name": "float",
                "description": "right side of the orthographic projection, which is used to calculate the coordinates of the vertices in the resulting matrix.",
                "complex_type": false
              },
              {
                "name": "bottom",
                "type_name": "float",
                "description": "2D coordinate of the bottom-left corner of the orthographic projection's viewport.",
                "complex_type": false
              },
              {
                "name": "top",
                "type_name": "float",
                "description": "2D coordinate of the top of the orthographic projection, which determines the position of the viewpoint relative to the 3D space.",
                "complex_type": false
              },
              {
                "name": "near",
                "type_name": "float",
                "description": "near plane of the orthographic projection, and it is used to calculate the values of the matrix's elements for the near clipping plane.",
                "complex_type": false
              },
              {
                "name": "far",
                "type_name": "float",
                "description": "3D distance from the near plane to which the orthographic projection is applied, and it determines the scale of the far objects in the resulting image.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a reference to the original Matrix4f object.\n\n* The output is a matrix with 4 rows and 4 columns (denoted as `data`).\n* Each element in the matrix has a value between 0 and 1.\n* The matrix represents an orthographic projection matrix, which means it maps points in 3D space to 2D screen coordinates.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n        Matrix4f ortho = new Matrix4f();\n        float left = -1;\n        float right = 2;\n        float bottom = -2;\n        float top = 3;\n        float near = 0.5;\n        float far = 3;\n\n        ortho.initOrthographic(left, right, bottom, top, near, far);\n    }\n",
              "description": "\nThis example will call the method initOrthographic and pass in values for 'left', 'float', and only them to it. It is a very short example that shows how this method would work correctly. The example does not create any unit tests as there are no edge cases or assumptions made about the input. Also, there is no explanation of the code given."
            },
            "name": "initOrthographic",
            "location": {
              "start": 164,
              "insert": 164,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "dfd14cdf-a139-4faf-364b-6405c7a10fb3",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Initializes a rotation matrix from three vectors: `forward`, `up`, and a third vector computed as their cross product. The resulting rotation matrix is returned.",
            "params": [
              {
                "name": "forward",
                "type_name": "Vector3f",
                "description": "3D direction in which the rotation will be applied.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D direction perpendicular to the rotation axis, which is used to compute the cross product with the `forward` parameter to determine the rotation axis.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing a rotation matrix based on the provided forward and up vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f forward = new Vector3f(1, 0, 0);\nVector3f up = new Vector3f(0, 1, 0);\nMatrix4f rotationMatrix = new Matrix4f().initRotation(forward, up);\n",
              "description": "\nThis code creates a matrix that will be used to rotate objects in the game world. The forward vector (1, 0, 0) is given as the first parameter of the initRotation method, and the up vector (0, 1, 0) is given as the second parameter. These vectors are then normalized using the normalize() method of the Vector3f class to ensure they have a length of one.\n\nThe resulting matrix will be used to rotate objects in the game world by multiplying it with the object's rotation matrix. The initRotation method returns a reference to this new matrix, which allows for chaining of the multiply operation using the mul() method of the Matrix4f class. For example:\n"
            },
            "name": "initRotation",
            "location": {
              "start": 189,
              "insert": 189,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "4de8dd05-055d-d696-4b4e-ba8beaee5239",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Initializes a rotation matrix based on three vectors: `forward`, `up`, and `right`. It sets the elements of the matrix according to the dot product of these vectors and returns the modified matrix.",
            "params": [
              {
                "name": "forward",
                "type_name": "Vector3f",
                "description": "3D direction in which the rotation will occur.\n\n* It is a 3D vector representing a direction in space.",
                "complex_type": true
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D vector that indicates the up direction and is used to set the y-component of the rotation matrix.\n\n* `up`: A vector representing the upward direction. Its main components are 0, 0, and 1.",
                "complex_type": true
              },
              {
                "name": "right",
                "type_name": "Vector3f",
                "description": "3D rightward vector component of the rotation axis, which is used to initialize the matrix elements for the rotational transformation.\n\n* The `Vector3f` object `right` represents a 3D vector that points in the rightward direction relative to the coordinate system.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix representing the rotation of a 3D object around its local axis.\n\n* The `Matrix4f` object returned by the function is the same as the original input matrix, with some elements modified to represent the rotation.\n* The elements in the first three rows and columns of the matrix represent the rotation axis (right), orientation (up), and forward direction, respectively. These elements are set to non-zero values.\n* The element in the fourth row and third column is set to 1, indicating that the matrix represents a rotation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f rotation = new Matrix4f();\nrotation.initRotation(new Vector3f(0, 0, -1), new Vector3f(0, 1, 0), new Vector3f(1, 0, 0));\n\n// The resulting Matrix4f is the identity matrix rotated by 90 degrees around Z.\n",
              "description": "\nThis code creates a new Matrix4f object and initializes it with the values for forward (0, 0, -1), up (0, 1, 0) and right (1, 0, 0). The resulting matrix is then returned as the initRotation method's return value."
            },
            "name": "initRotation",
            "location": {
              "start": 200,
              "insert": 200,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "9ffa676c-c7db-749f-ad45-e7a4fbe1b6bc",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Takes a `Vector3f` argument `r` and returns a new `Vector3f` instance with the result of multiplying each element of the input vector by the corresponding elements of a given array `data`, followed by adding the result of multiplying the three array elements by the input vector's `z` component.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "4D vector that the function transforms the input `Vector3f` by multiplying its components with the corresponding components of the `r` vector, and then returning the resulting 4D vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector with the result of multiplying each component of the input vector by a set of coefficients and adding them together.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    Vector3f r = new Vector3f(1, 2, 3);\n    Matrix4f m = new Matrix4f();\n    Vector3f v = m.transform(r);\n}\n",
              "description": "\nIn this example, the method transform is called on an instance of a class Matrix4f with a parameter r which is a Vector3f object. The method returns a Vector3f object which contains the result of the transformation applied to the input vector r."
            },
            "name": "transform",
            "location": {
              "start": 225,
              "insert": 225,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "e448c698-24d0-aeb6-ad44-e32853cfdbea",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Multiplies a matrix by another matrix, component-wise, and returns the result as a new matrix.",
            "params": [
              {
                "name": "r",
                "type_name": "Matrix4f",
                "description": "4x4 matrix to be multiplied with the current matrix, resulting in a new 4x4 matrix that contains the product of the two matrices.\n\n`r` is a `Matrix4f` object representing a 4x4 homogeneous matrix.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix that represents the result of multiplying the input matrix by another matrix.\n\nThe returned value is a `Matrix4f` object representing the matrix product of the input matrices. The dimensions of the matrix are 4x4, and the elements are calculated by multiplying the corresponding elements of the input matrices.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t\tMatrix4f m1 = new Matrix4f();\n\t\tMatrix4f m2 = new Matrix4f();\n\n\t\tm1.initRotation(new Vector3f(0, 1, 0), new Vector3f(1, 0, 0));\n\t\tm2.initScaling(new Vector3f(5, 5, 5));\n\n\t\tMatrix4f m3 = m1.mul(m2);\n\t}\n",
              "description": "\nThis example shows how to create a matrix using the initRotation method and then multiplying it with another matrix created using initScaling method.\nThe resulting matrix can be used for other mathematical operations such as matrix multiplication, multiplication by a scalar, or inverse of a matrix.\nAlso notice that the data member of the matrix is not directly accessible.  Therefore, methods such as getLinearData, set, and transposeSelf are provided to allow access to the linear data."
            },
            "name": "mul",
            "location": {
              "start": 230,
              "insert": 230,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "ed8bb156-6dae-31aa-ea4a-81cbb7c9f0fb",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Returns an array of arrays, where each inner array represents a 4x4 matrix and contains values from the `data` array.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "an array of arrays, each element of which contains the value of `data[i][j]`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t\tMatrix4f matrix = new Matrix4f();\n\t\tmatrix.set(1, 2, 3);\n\t\tfloat[][] data = matrix.getData();\n\t\tSystem.out.println(data[0][0] + \" \" + data[0][1] + \" \" + data[0][2]);\n\t}\n",
              "description": "\nIn this example we create a new matrix and set its first value to (1, 2, 3). Then we use the getData method to access the internal float array and print its contents. The result should be:\n"
            },
            "name": "getData",
            "location": {
              "start": 242,
              "insert": 242,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "244dd76f-9744-0fbe-d748-4b1319445e7f",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Returns an array of floats representing the linear data associated with a given dataset.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "an array of 12 floats representing the linear data.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    float[][] data = new float[4][4];\n    \n    // Initialize the array with some values for demonstration purposes. \n    data[0][0] = 1;\n    data[0][1] = 2;\n    data[0][2] = 3;\n    data[0][3] = 4;\n    data[1][0] = 5;\n    data[1][1] = 6;\n    Matrix matrix = new Matrix(data);\n    \n    // Print the linearized version of the input array.\n    System.out.println(\"Linearized data:\");\n    System.out.println(Arrays.toString(matrix.getLinearData()));\n}\n",
              "description": "\nThis would output:\n"
            },
            "name": "getLinearData",
            "location": {
              "start": 252,
              "insert": 252,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "cc0590e4-8e4b-8dbd-ad43-2161c7f4c9fa",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Retrieves a value from an array at position (x, y).",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "1D position of the pixel in the grid.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "2nd dimension of the data array that is being accessed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the data at the specified position in the 2D array.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n        Matrix4f matrix = new Matrix4f().initIdentity();\n        \n        System.out.println(\"Matrix 1:\");\n        printMatrix(matrix);\n        \n        float value = matrix.get(2, 3); // Access element at row 2 and column 3 of the matrix\n        System.out.println(\"Value of Matrix 1 at (2, 3): \" + value);\n    }\n    \n    public static void printMatrix(Matrix4f matrix) {\n        for (int i = 0; i < 4; i++) {\n            String line = \"\";\n            \n            for (int j = 0; j < 4; j++) {\n                line += matrix.get(i, j);\n                \n                if (j != 3) {\n                    line += \", \";\n                }\n            }\n            \n            System.out.println(line);\n        }\n        \n        System.out.println();\n    }\n",
              "description": "\nIn this example we create a new Matrix4f object and initialize it to the identity matrix using initIdentity(). We then access element at row 2 and column 3 of the matrix using get() and print out its value. We also create a printMatrix method that will print out all elements in the matrix with comma separated values.\nThe output should be:\n"
            },
            "name": "get",
            "location": {
              "start": 273,
              "insert": 273,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7f22bfdf-092e-6db4-f44e-be440cc2c250",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Sets the value of the class member `data` to a provided float array array `data`.",
            "params": [
              {
                "name": "data",
                "type_name": "float[][]",
                "description": "2D array of floating-point values that will be stored and manipulated by the `SetM` function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example {\n    float[][] data;\n\n    public static void main(String[] args) {\n        Example example = new Example();\n        float[][] inputData = {{1, 2}, {3, 4}};\n        example.SetM(inputData);\n    }\n}\n",
              "description": "\nIn this example, the `data` field of the `Example` class is set to the array `{{1, 2}, {3, 4}}`. This array is passed into the method `SetM` which assigns it to the `data` field. The program then ends."
            },
            "name": "SetM",
            "location": {
              "start": 277,
              "insert": 277,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b90875dd-051d-d298-9e43-b8067ddc7b56",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Sets a value at a specific position in a 2D array of integers and floats, by updating the corresponding element with the given float value.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "0-based index of the row in the 2D array where the value should be stored.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "2nd dimension of the data array being manipulated by the function, which is indexed in the code as `data[x][y]`.",
                "complex_type": false
              },
              {
                "name": "value",
                "type_name": "float",
                "description": "3D coordinate's value that is assigned to the corresponding element in the `data` array.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Matrix4f matrix = new Matrix4f();\nmatrix.set(1, 2, 3);\n",
              "description": "\nHere we create a new `Matrix4f` object and set the value at (1, 2) to 3 using the `set` method. Note that this is just an example, the actual usage of this method would depend on the specific implementation of the matrix class."
            },
            "name": "set",
            "location": {
              "start": 281,
              "insert": 281,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "729a1323-b90c-9789-f24a-5d81d19f07d7",
            "ancestors": [
              "fce3a915-5511-d5bb-ad46-b9d1383bd86b"
            ],
            "description": "Transforms an array of floats into its transposed form, which is then assigned back to the original array.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.initIdentity();\nm.transposeSelf();\n",
              "description": "\nThis creates a 4x4 identity matrix and then transposes it, resulting in the same matrix with all values swapped around the diagonal. For example, if the identity matrix is:\n"
            },
            "name": "transposeSelf",
            "location": {
              "start": 285,
              "insert": 285,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Camera3D.java",
    "path": "src/com/ch/Camera3D.java",
    "content": {
      "structured": {
        "description": "A 3D camera class called `Camera3D` that handles input and rendering. It uses the `GL11` library for rendering. The camera class has a constructor that takes four parameters: field of view (fov), aspect ratio, near plane distance (zNear), and far plane distance (zFar). The class also has methods for calculating the projection matrix, adjusting to the viewport size, processing input events such as mouse and keyboard movements, and moving the camera position.",
        "diagram": {
          "path": "src/com/ch/Camera3D.java",
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    subgraph cluster_1 {\n        label=\"com\"\n        color=\"#33363A\"\n        CameraStruct []\n        subgraph cluster_main {\n            // style=filled\n            color=\"#00000000\"\n            Camera3D [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n            label = \"\"\n        }\n        subgraph cluster_2 {\n            label=\"ch\"\n            color=\"#33363A\"\n            Vector3f []\n            Matrix4f []\n        }\n    }\n    subgraph cluster_4 {\n        label=\"org/lwjgl\"\n        color=\"#33363A\"\n        Keyboard [label=\"org.lwjgl.input.Keyboard\", style=\"rounded,filled\"]\n        Mouse [label=\"org.lwjgl.input.Mouse\", style=\"rounded,filled\"]\n        GL11 [label=\"org.lwjgl.opengl.GL11\", style=\"rounded,filled\"]\n    }\n    CameraStruct -> Camera3D [penwidth=1]\n    Camera3D -> Mouse [style=\"dashed\"]\n    Camera3D -> Vector3f [style=\"dashed\"]\n    Camera3D -> Matrix4f [penwidth=2]\n    Camera3D -> Keyboard [style=\"dashed\"]\n    Vector3f -> Camera3D [penwidth=1]\n    Camera3D -> Matrix4f [style=\"dashed\"]\n    Camera3D -> GL11 [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 781 1461\"><svg id=\"d2-svg\" class=\"d2-1670053911\" width=\"781\" height=\"1461\" viewBox=\"11 11 781 1461\"><rect x=\"11.000000\" y=\"11.000000\" width=\"781.000000\" height=\"1461.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-1670053911 .text {\n\tfont-family: \"d2-1670053911-font-regular\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1670053911 .text-italic {\n\tfont-family: \"d2-1670053911-font-italic\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1670053911 .text-mono {\n\tfont-family: \"d2-1670053911-font-mono\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1670053911 .text-mono-bold {\n\tfont-family: \"d2-1670053911-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-1670053911 .fill-N1{fill:#ECEDED;}\n\t\t.d2-1670053911 .fill-N2{fill:#676C7E;}\n\t\t.d2-1670053911 .fill-N3{fill:#9499AB;}\n\t\t.d2-1670053911 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-1670053911 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-1670053911 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-1670053911 .fill-N7{fill:#151719;}\n\t\t.d2-1670053911 .fill-B1{fill:#717D86;}\n\t\t.d2-1670053911 .fill-B2{fill:#717D86;}\n\t\t.d2-1670053911 .fill-B3{fill:#ffff00;}\n\t\t.d2-1670053911 .fill-B4{fill:#151719;}\n\t\t.d2-1670053911 .fill-B5{fill:#151719;}\n\t\t.d2-1670053911 .fill-B6{fill:#151719;}\n\t\t.d2-1670053911 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-1670053911 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-1670053911 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-1670053911 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-1670053911 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-1670053911 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-1670053911 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-1670053911 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-1670053911 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-1670053911 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-1670053911 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-1670053911 .stroke-N7{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-B1{stroke:#717D86;}\n\t\t.d2-1670053911 .stroke-B2{stroke:#717D86;}\n\t\t.d2-1670053911 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-1670053911 .stroke-B4{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-B5{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-B6{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-1670053911 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-1670053911 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-1670053911 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-1670053911 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-1670053911 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-1670053911 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-1670053911 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-1670053911 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-1670053911 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-1670053911 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-1670053911 .background-color-N7{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-B1{background-color:#717D86;}\n\t\t.d2-1670053911 .background-color-B2{background-color:#717D86;}\n\t\t.d2-1670053911 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-1670053911 .background-color-B4{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-B5{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-B6{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-1670053911 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-1670053911 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-1670053911 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-1670053911 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-1670053911 .color-N1{color:#ECEDED;}\n\t\t.d2-1670053911 .color-N2{color:#676C7E;}\n\t\t.d2-1670053911 .color-N3{color:#9499AB;}\n\t\t.d2-1670053911 .color-N4{color:#CFD2DD;}\n\t\t.d2-1670053911 .color-N5{color:#DEE1EB;}\n\t\t.d2-1670053911 .color-N6{color:#EEF1F8;}\n\t\t.d2-1670053911 .color-N7{color:#151719;}\n\t\t.d2-1670053911 .color-B1{color:#717D86;}\n\t\t.d2-1670053911 .color-B2{color:#717D86;}\n\t\t.d2-1670053911 .color-B3{color:#ffff00;}\n\t\t.d2-1670053911 .color-B4{color:#151719;}\n\t\t.d2-1670053911 .color-B5{color:#151719;}\n\t\t.d2-1670053911 .color-B6{color:#151719;}\n\t\t.d2-1670053911 .color-AA2{color:#ECEDED;}\n\t\t.d2-1670053911 .color-AA4{color:#CFD2DD;}\n\t\t.d2-1670053911 .color-AA5{color:#DEE1EB;}\n\t\t.d2-1670053911 .color-AB4{color:#CFD2DD;}\n\t\t.d2-1670053911 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"122.000000\" y=\"12.000000\" width=\"669.000000\" height=\"943.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"456.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"1095.000000\" width=\"737.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"380.500000\" y=\"1128.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"172.000000\" y=\"62.000000\" width=\"569.000000\" height=\"838.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"456.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"1150.000000\" width=\"637.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"380.500000\" y=\"1179.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Camera3D\"><g class=\"shape\" ><rect x=\"360.000000\" y=\"248.000000\" width=\"240.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"480.000000\" y=\"286.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Camera3D</text></g><g id=\"org.lwjgl.input\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"1205.000000\" width=\"334.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"279.000000\" y=\"1230.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">input</text></g><g id=\"org.lwjgl.opengl\"><g class=\"shape\" ><rect x=\"466.000000\" y=\"1205.000000\" width=\"183.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"557.500000\" y=\"1230.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">opengl</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"285.000000\" y=\"599.000000\" width=\"366.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"468.000000\" y=\"624.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.CameraStruct\"><g class=\"shape\" ><rect x=\"400.000000\" y=\"112.000000\" width=\"160.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"480.000000\" y=\"150.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">CameraStruct</text></g><g id=\"org.lwjgl.input.Keyboard\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"1255.000000\" width=\"121.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"222.500000\" y=\"1293.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Keyboard</text></g><g id=\"org.lwjgl.input.Mouse\"><g class=\"shape\" ><rect x=\"303.000000\" y=\"1255.000000\" width=\"93.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"349.500000\" y=\"1293.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Mouse</text></g><g id=\"org.lwjgl.opengl.GL11\"><g class=\"shape\" ><rect x=\"516.000000\" y=\"1255.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"557.500000\" y=\"1293.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL11</text></g><g id=\"com.ch.math.Matrix4f\"><g class=\"shape\" ><rect x=\"335.000000\" y=\"649.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"396.500000\" y=\"687.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Matrix4f</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"478.000000\" y=\"649.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"539.500000\" y=\"687.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"(com.ch.Camera3D -&gt; org.lwjgl.input.Keyboard)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 390.000000 315.000000 L 390.000000 344.000000 S 390.000000 354.000000 380.000000 354.000000 L 232.500000 354.000000 S 222.500000 354.000000 222.500000 364.000000 L 222.500000 1251.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"257.000000\" y=\"1245.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Camera3D -&gt; org.lwjgl.input.Mouse)[0]\"><path d=\"M 420.000000 315.000000 L 420.000000 394.000000 S 420.000000 404.000000 410.000000 404.000000 L 243.500000 404.000000 S 233.500000 404.000000 233.500000 414.000000 L 233.500000 1040.000000 S 233.500000 1050.000000 243.500000 1050.000000 L 339.500000 1050.000000 S 349.500000 1050.000000 349.500000 1060.000000 L 349.500000 1251.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"384.000000\" y=\"1245.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Camera3D -&gt; org.lwjgl.opengl.GL11)[0]\"><path d=\"M 450.000000 315.000000 L 450.000000 444.000000 S 450.000000 454.000000 440.000000 454.000000 L 254.500000 454.000000 S 244.500000 454.000000 244.500000 464.000000 L 244.500000 990.000000 S 244.500000 1000.000000 254.500000 1000.000000 L 547.500000 1000.000000 S 557.500000 1000.000000 557.500000 1010.000000 L 557.500000 1251.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"592.000000\" y=\"1245.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Matrix4f)[0]\"><path d=\"M 480.000000 315.000000 L 480.000000 494.000000 S 480.000000 504.000000 470.000000 504.000000 L 386.500000 504.000000 S 376.500000 504.000000 376.500000 514.000000 L 376.500000 646.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"411.000000\" y=\"639.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Vector3f)[0]\"><path d=\"M 540.000000 315.000000 L 540.000000 646.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"574.000000\" y=\"639.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Matrix4f)[1]\"><path d=\"M 510.000000 315.000000 L 510.000000 544.000000 S 510.000000 554.000000 500.000000 554.000000 L 427.500000 554.000000 S 417.500000 554.000000 417.500000 564.000000 L 417.500000 646.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /></g><g id=\"com.ch.(CameraStruct -&gt; Camera3D)[0]\"><path d=\"M 480.000000 179.000000 L 480.000000 245.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /></g><g id=\"com.ch.(math.Vector3f -&gt; Camera3D)[0]\"><path d=\"M 540.000000 716.000000 L 540.000000 800.000000 S 540.000000 810.000000 550.000000 810.000000 L 681.500000 810.000000 S 691.500000 810.000000 691.500000 800.000000 L 691.500000 364.000000 S 691.500000 354.000000 681.500000 354.000000 L 580.000000 354.000000 S 570.000000 354.000000 570.000000 344.000000 L 570.000000 317.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /></g><mask id=\"d2-1670053911\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"781\" height=\"1461\">\n<rect x=\"11\" y=\"11\" width=\"781\" height=\"1461\" fill=\"white\"></rect>\n<rect x=\"432.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"361.500000\" y=\"1100.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"445.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"357.000000\" y=\"1155.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"441.000000\" y=\"270.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"256.500000\" y=\"1210.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"528.500000\" y=\"1210.000000\" width=\"58\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"446.500000\" y=\"604.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"422.500000\" y=\"134.500000\" width=\"115\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"1277.500000\" width=\"76\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"325.500000\" y=\"1277.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"538.500000\" y=\"1277.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"357.500000\" y=\"671.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"500.500000\" y=\"671.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Camera3D -> org.lwjgl.input.Keyboard: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> org.lwjgl.input.Mouse: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> org.lwjgl.opengl.GL11: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Vector3f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.CameraStruct -> com.ch.Camera3D: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Vector3f -> com.ch.Camera3D: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\norg.lwjgl.input.Keyboard: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.input.Mouse: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL11: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.math.Matrix4f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Vector3f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.CameraStruct: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Camera3D: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Camera3D: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "f03ad059-844f-aa9f-ea4c-68eb4fb01729",
            "ancestors": [],
            "description": "Has a constructor that takes fov, aspect, zNear, and zFar parameters to initialize its values. It also has calculateProjectionMatrix() method that calculates the projection matrix based on the input values. The class also has an adjustToViewport() method that adjusts the projection matrix based on the viewport dimensions. Additionally, it has a processInput() method that processes keyboard and mouse inputs to move the camera.",
            "name": "Camera3D",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "c6534732-65ba-de85-8741-2f4f4643b375",
            "ancestors": [
              "f03ad059-844f-aa9f-ea4c-68eb4fb01729"
            ],
            "description": "Takes a `CameraStruct` object as input and returns the projection matrix as a `Matrix4f` object.",
            "params": [
              {
                "name": "data",
                "type_name": "CameraStruct",
                "description": "3D camera data that is used to calculate the projection matrix.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object representing the camera's projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Game {\n\tpublic static void main(String[] args) {\n\t\t// Create a new instance of the Camera3D class\n\t\tCamera3D camera = new Camera3D(45.0f, 16.0f/9.0f, 0.1f, 100.0f);\n\t\t\n\t\t// Create a new instance of the CameraStruct class and set its parameters\n\t\tCameraStruct struct = new CameraStruct();\n\t\tstruct.setFOV(45.0f);\n\t\tstruct.setAspect(16.0f/9.0f);\n\t\tstruct.setZNear(0.1f);\n\t\tstruct.setZFar(100.0f);\n\t\t\n\t\t// Call the calculateProjectionMatrix method with the struct as a parameter\n\t\tcamera.calculateProjectionMatrix(struct);\n\t}\n}\n",
              "description": ""
            },
            "name": "calculateProjectionMatrix",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "88455bf8-6689-83b6-3f40-5180be184696",
            "ancestors": [
              "f03ad059-844f-aa9f-ea4c-68eb4fb01729"
            ],
            "description": "Adjusts the camera's projection and view matrices to fit within the bounds of a viewport with specified dimensions. It also sets the camera's aspect ratio based on the viewport width and height.",
            "params": [
              {
                "name": "width",
                "type_name": "int",
                "description": "2D viewport width for which the `adjustToViewport` method is adjusting the 3D model's projection matrix.",
                "complex_type": false
              },
              {
                "name": "height",
                "type_name": "int",
                "description": "2D viewport size of the canvas in pixels, which is used to calculate the appropriate projection and view matrices for the 3D scene.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import org.lwjgl.opengl.GL11;\n\npublic class Main {\n    public static void main(String[] args) {\n        Camera3D camera = new Camera3D();\n        GL11.glViewport(0, 0, 800, 600);\n        int width = 800;\n        int height = 600;\n        camera.adjustToViewport(width, height);\n    }\n}\n",
              "description": ""
            },
            "name": "adjustToViewport",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "379717d7-0a7b-b789-a44d-0922638d93a3",
            "ancestors": [
              "f03ad059-844f-aa9f-ea4c-68eb4fb01729"
            ],
            "description": "Is a customized extension of the Camera Struct, adding additional fields and methods to handle 3D camera functionality. The class provides a matrix4f object for perspectives calculations and includes methods for adjusting to viewport size, processing input, and moving the camera position.",
            "name": "CameraStruct3D",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 16,
            "docLength": null
          },
          {
            "id": "de9fae52-b247-5bac-bf42-803aa0bade32",
            "ancestors": [
              "f03ad059-844f-aa9f-ea4c-68eb4fb01729",
              "379717d7-0a7b-b789-a44d-0922638d93a3"
            ],
            "description": "Initializes a `Matrix4f` object with a perspective projection matrix, setting its fields according to the provided field values.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix representing a perspective projection, with fields for field of view, aspect ratio, near and far planes.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(70, 16/9, 0.1f, 100.0f);\n\t\tcamera.adjustToViewport(800, 600);\n\t\tMatrix4f projMat = camera.getAsMatrix4();\n",
              "description": "\nIn this example, a Camera3D object is created and its adjustToViewport method is called with the dimensions of the viewport to adjust the camera's projection matrix. The getAsMatrix4 method is then used to obtain the projection matrix as a Matrix4f object."
            },
            "name": "getAsMatrix4",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "5c7e85d1-d1e0-a69d-dd43-11c981893485",
            "ancestors": [
              "f03ad059-844f-aa9f-ea4c-68eb4fb01729"
            ],
            "description": "Processes input events from the mouse and keyboard, applying rotations and translations to an object based on user input.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "3D space time interval over which the game world is updated, and it multiplies the movement speed of the object.",
                "complex_type": false
              },
              {
                "name": "speed",
                "type_name": "float",
                "description": "2D movement speed of the object being controlled, which is multiplied by the time interval `dt` to determine the distance traveled during each frame.",
                "complex_type": false
              },
              {
                "name": "sens",
                "type_name": "float",
                "description": "sensitivity of the character's movement to mouse input, which determines how much the character will move in response to small changes in mouse position.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tCamera3D camera = new Camera3D(45, 16 / 9, 0.1f, 100);\n\n\twhile (!Display.isCloseRequested()) {\n\t\tfloat dt = Display.getDeltaTime();\n\t\tcamera.processInput(dt, 5, 2);\n\n\t\t// update the camera position based on user input\n\t\tVector3f moveDir = new Vector3f(0, 1, 0).rotate(new Vector3f(0, 1, 0), camera.getTransform().getRot().getYaw());\n\t\tcamera.move(moveDir, dt * 5);\n\t}\n}\n",
              "description": ""
            },
            "name": "processInput",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "64a6c518-5b49-0b98-e747-d416fac5b3e4",
            "ancestors": [
              "f03ad059-844f-aa9f-ea4c-68eb4fb01729"
            ],
            "description": "Updates the position of an object by adding a directional vector multiplied by a scalar amount to its current position.",
            "params": [
              {
                "name": "dir",
                "type_name": "Vector3f",
                "description": "3D direction to move the object in the game world.",
                "complex_type": false
              },
              {
                "name": "amt",
                "type_name": "float",
                "description": "amount of movement along the specified direction, which is added to the current position of the object.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f direction = new Vector3f(0, 1, 0); // Forward\n\tfloat amount = 5;\n\tcamera.move(direction, amount);\n",
              "description": "\nIn this example, the `move` method is called on a `Camera` object with a forward direction vector (`0, 1, 0`) and an amount of movement (`5`). This will move the camera in the forward direction by `5` units."
            },
            "name": "move",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Shader.java",
    "path": "src/com/ch/Shader.java",
    "content": {
      "structured": {
        "description": "A `Shader` class for managing OpenGL shaders. The class loads shaders from files and validates their syntax, then binds them to a program and sets uniform values using glUniform functions. Additionally, it provides methods for setting matrix values as uniforms using glUniformMatrix4 function.",
        "diagram": {
          "path": "src/com/ch/Shader.java",
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    subgraph cluster_1 {\n        label=\"java\"\n        color=\"#33363A\"\n        InputStream [label=\"java.io.InputStream\", style=\"rounded,filled\"]\n        FileInputStream [label=\"java.io.FileInputStream\", style=\"rounded,filled\"]\n        IOException [label=\"java.io.IOException\", style=\"rounded,filled\"]\n    }\n    subgraph cluster_3 {\n        label=\"org/lwjgl\"\n        color=\"#33363A\"\n        GL20 [label=\"org.lwjgl.opengl.GL20\", style=\"rounded,filled\"]\n        subgraph cluster_4 {\n            label=\"opengl\"\n            color=\"#33363A\"\n            GL_LINK_STATUS [label=\"org.lwjgl.opengl.GL20.GL_LINK_STATUS\", style=\"rounded,filled\"]\n            glGetProgramInfoLog [label=\"org.lwjgl.opengl.GL20.glGetProgramInfoLog\", style=\"rounded,filled\"]\n            glGetProgrami [label=\"org.lwjgl.opengl.GL20.glGetProgrami\", style=\"rounded,filled\"]\n            glGetShaderInfoLog [label=\"org.lwjgl.opengl.GL20.glGetShaderInfoLog\", style=\"rounded,filled\"]\n            GL_VALIDATE_STATUS [label=\"org.lwjgl.opengl.GL20.GL_VALIDATE_STATUS\", style=\"rounded,filled\"]\n            glGetShaderi [label=\"org.lwjgl.opengl.GL20.glGetShaderi\", style=\"rounded,filled\"]\n            GL_COMPILE_STATUS [label=\"org.lwjgl.opengl.GL20.GL_COMPILE_STATUS\", style=\"rounded,filled\"]\n        }\n    }\n    subgraph cluster_5 {\n        label=\"com\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled\n            color=\"#00000000\"\n            Shader [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n            label = \"\"\n        }\n        subgraph cluster_6 {\n            label=\"ch\"\n            color=\"#33363A\"\n            World []\n            Matrix4f []\n        }\n    }\n    Shader -> GL_LINK_STATUS [style=\"dashed\"]\n    Shader -> World [penwidth=1]\n    Shader -> GL_VALIDATE_STATUS [style=\"dashed\"]\n    Shader -> glGetShaderi [style=\"dashed\"]\n    Shader -> Matrix4f [style=\"dashed\"]\n    Shader -> GL_COMPILE_STATUS [style=\"dashed\"]\n    Shader -> glGetProgramInfoLog [style=\"dashed\"]\n    Shader -> glGetProgrami [style=\"dashed\"]\n    Matrix4f -> Shader [penwidth=1]\n    Shader -> glGetShaderInfoLog [style=\"dashed\"]\n    Shader -> InputStream [style=\"dashed\"]\n    Shader -> IOException [style=\"dashed\"]\n    World -> Shader [style=\"dashed\"]\n    Shader -> FileInputStream [style=\"dashed\"]\n    Shader -> GL20 [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 2650 1930\"><svg id=\"d2-svg\" class=\"d2-4194508906\" width=\"2650\" height=\"1930\" viewBox=\"11 11 2650 1930\"><rect x=\"11.000000\" y=\"11.000000\" width=\"2650.000000\" height=\"1930.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-4194508906 .text {\n\tfont-family: \"d2-4194508906-font-regular\";\n}\n@font-face {\n\tfont-family: d2-4194508906-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4194508906 .text-italic {\n\tfont-family: \"d2-4194508906-font-italic\";\n}\n@font-face {\n\tfont-family: d2-4194508906-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4194508906 .text-mono {\n\tfont-family: \"d2-4194508906-font-mono\";\n}\n@font-face {\n\tfont-family: d2-4194508906-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4194508906 .text-mono-bold {\n\tfont-family: \"d2-4194508906-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-4194508906-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-4194508906 .fill-N1{fill:#ECEDED;}\n\t\t.d2-4194508906 .fill-N2{fill:#676C7E;}\n\t\t.d2-4194508906 .fill-N3{fill:#9499AB;}\n\t\t.d2-4194508906 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-4194508906 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-4194508906 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-4194508906 .fill-N7{fill:#151719;}\n\t\t.d2-4194508906 .fill-B1{fill:#717D86;}\n\t\t.d2-4194508906 .fill-B2{fill:#717D86;}\n\t\t.d2-4194508906 .fill-B3{fill:#ffff00;}\n\t\t.d2-4194508906 .fill-B4{fill:#151719;}\n\t\t.d2-4194508906 .fill-B5{fill:#151719;}\n\t\t.d2-4194508906 .fill-B6{fill:#151719;}\n\t\t.d2-4194508906 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-4194508906 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-4194508906 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-4194508906 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-4194508906 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-4194508906 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-4194508906 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-4194508906 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-4194508906 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-4194508906 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-4194508906 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-4194508906 .stroke-N7{stroke:#151719;}\n\t\t.d2-4194508906 .stroke-B1{stroke:#717D86;}\n\t\t.d2-4194508906 .stroke-B2{stroke:#717D86;}\n\t\t.d2-4194508906 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-4194508906 .stroke-B4{stroke:#151719;}\n\t\t.d2-4194508906 .stroke-B5{stroke:#151719;}\n\t\t.d2-4194508906 .stroke-B6{stroke:#151719;}\n\t\t.d2-4194508906 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-4194508906 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-4194508906 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-4194508906 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-4194508906 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-4194508906 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-4194508906 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-4194508906 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-4194508906 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-4194508906 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-4194508906 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-4194508906 .background-color-N7{background-color:#151719;}\n\t\t.d2-4194508906 .background-color-B1{background-color:#717D86;}\n\t\t.d2-4194508906 .background-color-B2{background-color:#717D86;}\n\t\t.d2-4194508906 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-4194508906 .background-color-B4{background-color:#151719;}\n\t\t.d2-4194508906 .background-color-B5{background-color:#151719;}\n\t\t.d2-4194508906 .background-color-B6{background-color:#151719;}\n\t\t.d2-4194508906 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-4194508906 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-4194508906 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-4194508906 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-4194508906 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-4194508906 .color-N1{color:#ECEDED;}\n\t\t.d2-4194508906 .color-N2{color:#676C7E;}\n\t\t.d2-4194508906 .color-N3{color:#9499AB;}\n\t\t.d2-4194508906 .color-N4{color:#CFD2DD;}\n\t\t.d2-4194508906 .color-N5{color:#DEE1EB;}\n\t\t.d2-4194508906 .color-N6{color:#EEF1F8;}\n\t\t.d2-4194508906 .color-N7{color:#151719;}\n\t\t.d2-4194508906 .color-B1{color:#717D86;}\n\t\t.d2-4194508906 .color-B2{color:#717D86;}\n\t\t.d2-4194508906 .color-B3{color:#ffff00;}\n\t\t.d2-4194508906 .color-B4{color:#151719;}\n\t\t.d2-4194508906 .color-B5{color:#151719;}\n\t\t.d2-4194508906 .color-B6{color:#151719;}\n\t\t.d2-4194508906 .color-AA2{color:#ECEDED;}\n\t\t.d2-4194508906 .color-AA4{color:#CFD2DD;}\n\t\t.d2-4194508906 .color-AA5{color:#DEE1EB;}\n\t\t.d2-4194508906 .color-AB4{color:#CFD2DD;}\n\t\t.d2-4194508906 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"1292.000000\" y=\"12.000000\" width=\"1027.000000\" height=\"1107.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"1805.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"1459.000000\" width=\"1900.000000\" height=\"481.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"962.000000\" y=\"1492.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"java\"><g class=\"shape\" ><rect x=\"1932.000000\" y=\"1459.000000\" width=\"728.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"2296.000000\" y=\"1492.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">java</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"1342.000000\" y=\"62.000000\" width=\"927.000000\" height=\"1002.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"1805.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"1514.000000\" width=\"1800.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"962.000000\" y=\"1543.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"java.io\"><g class=\"shape\" ><rect x=\"1982.000000\" y=\"1514.000000\" width=\"628.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"2296.000000\" y=\"1543.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">io</text></g><g id=\"com.ch.Shader\"><g class=\"shape\" ><rect x=\"1392.000000\" y=\"112.000000\" width=\"520.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"1652.000000\" y=\"150.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Shader</text></g><g id=\"org.lwjgl.opengl\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"1569.000000\" width=\"1700.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"962.000000\" y=\"1594.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">opengl</text></g><g id=\"java.io.FileInputStream\"><g class=\"shape\" ><rect x=\"2032.000000\" y=\"1564.000000\" width=\"189.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2126.500000\" y=\"1602.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">FileInputStream</text></g><g id=\"java.io.IOException\"><g class=\"shape\" ><rect x=\"2241.000000\" y=\"1564.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2315.500000\" y=\"1602.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">IOException</text></g><g id=\"java.io.InputStream\"><g class=\"shape\" ><rect x=\"2410.000000\" y=\"1564.000000\" width=\"150.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2485.000000\" y=\"1602.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">InputStream</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"1683.000000\" y=\"763.000000\" width=\"223.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"1794.500000\" y=\"788.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"1986.000000\" y=\"763.000000\" width=\"193.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"2082.500000\" y=\"788.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"org.lwjgl.opengl.GL20\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"1624.000000\" width=\"1600.000000\" height=\"166.000000\" rx=\"83.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"962.000000\" y=\"1645.000000\" class=\"text-mono fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL20</text></g><g id=\"com.ch.math.Matrix4f\"><g class=\"shape\" ><rect x=\"1733.000000\" y=\"813.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"1794.500000\" y=\"851.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Matrix4f</text></g><g id=\"com.ch.voxel.World\"><g class=\"shape\" ><rect x=\"2036.000000\" y=\"813.000000\" width=\"93.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"2082.500000\" y=\"851.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">World</text></g><g id=\"org.lwjgl.opengl.GL20.GL_COMPILE_STATUS\"><g class=\"shape\" ><rect x=\"212.000000\" y=\"1674.000000\" width=\"208.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"316.000000\" y=\"1712.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL_COMPILE_STATUS</text></g><g id=\"org.lwjgl.opengl.GL20.GL_LINK_STATUS\"><g class=\"shape\" ><rect x=\"440.000000\" y=\"1674.000000\" width=\"179.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"529.500000\" y=\"1712.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL_LINK_STATUS</text></g><g id=\"org.lwjgl.opengl.GL20.GL_VALIDATE_STATUS\"><g class=\"shape\" ><rect x=\"639.000000\" y=\"1674.000000\" width=\"218.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"748.000000\" y=\"1712.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL_VALIDATE_STATUS</text></g><g id=\"org.lwjgl.opengl.GL20.glGetProgramInfoLog\"><g class=\"shape\" ><rect x=\"877.000000\" y=\"1674.000000\" width=\"228.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"991.000000\" y=\"1712.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">glGetProgramInfoLog</text></g><g id=\"org.lwjgl.opengl.GL20.glGetProgrami\"><g class=\"shape\" ><rect x=\"1125.000000\" y=\"1674.000000\" width=\"169.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1209.500000\" y=\"1712.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">glGetProgrami</text></g><g id=\"org.lwjgl.opengl.GL20.glGetShaderInfoLog\"><g class=\"shape\" ><rect x=\"1314.000000\" y=\"1674.000000\" width=\"219.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1423.500000\" y=\"1712.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">glGetShaderInfoLog</text></g><g id=\"org.lwjgl.opengl.GL20.glGetShaderi\"><g class=\"shape\" ><rect x=\"1553.000000\" y=\"1674.000000\" width=\"159.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1632.500000\" y=\"1712.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">glGetShaderi</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20.GL_COMPILE_STATUS)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 1408.750000 179.000000 L 1408.750000 1154.000000 S 1408.750000 1164.000000 1398.750000 1164.000000 L 326.000000 1164.000000 S 316.000000 1164.000000 316.000000 1174.000000 L 316.000000 1670.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"350.000000\" y=\"1664.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20.GL_LINK_STATUS)[0]\"><path d=\"M 1430.500000 179.000000 L 1430.500000 1204.000000 S 1430.500000 1214.000000 1420.500000 1214.000000 L 539.500000 1214.000000 S 529.500000 1214.000000 529.500000 1224.000000 L 529.500000 1670.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"564.000000\" y=\"1664.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20.GL_VALIDATE_STATUS)[0]\"><path d=\"M 1452.250000 179.000000 L 1452.250000 1254.000000 S 1452.250000 1264.000000 1442.250000 1264.000000 L 758.000000 1264.000000 S 748.000000 1264.000000 748.000000 1274.000000 L 748.000000 1670.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"782.000000\" y=\"1664.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20.glGetProgramInfoLog)[0]\"><path d=\"M 1474.000000 179.000000 L 1474.000000 1304.000000 S 1474.000000 1314.000000 1464.000000 1314.000000 L 1001.000000 1314.000000 S 991.000000 1314.000000 991.000000 1324.000000 L 991.000000 1670.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"1025.000000\" y=\"1664.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20.glGetProgrami)[0]\"><path d=\"M 1495.750000 179.000000 L 1495.750000 1354.000000 S 1495.750000 1364.000000 1485.750000 1364.000000 L 1219.500000 1364.000000 S 1209.500000 1364.000000 1209.500000 1374.000000 L 1209.500000 1670.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"1244.000000\" y=\"1664.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20.glGetShaderInfoLog)[0]\"><path d=\"M 1517.500000 179.000000 L 1517.500000 1404.000000 S 1517.500000 1414.000000 1507.500000 1414.000000 L 1433.500000 1414.000000 S 1423.500000 1414.000000 1423.500000 1424.000000 L 1423.500000 1670.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"1458.000000\" y=\"1664.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20.glGetShaderi)[0]\"><path d=\"M 1544.750000 179.000000 L 1544.750000 1304.000000 S 1544.750000 1314.000000 1554.750000 1314.000000 L 1622.500000 1314.000000 S 1632.500000 1314.000000 1632.500000 1324.000000 L 1632.500000 1670.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"1667.000000\" y=\"1664.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; java.io.FileInputStream)[0]\"><path d=\"M 1577.250000 179.000000 L 1577.250000 1254.000000 S 1577.250000 1264.000000 1587.250000 1264.000000 L 2116.500000 1264.000000 S 2126.500000 1264.000000 2126.500000 1274.000000 L 2126.500000 1560.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"2161.000000\" y=\"1554.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; java.io.IOException)[0]\"><path d=\"M 1599.000000 179.000000 L 1599.000000 1204.000000 S 1599.000000 1214.000000 1609.000000 1214.000000 L 2305.500000 1214.000000 S 2315.500000 1214.000000 2315.500000 1224.000000 L 2315.500000 1560.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"2350.000000\" y=\"1554.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; java.io.InputStream)[0]\"><path d=\"M 1620.750000 179.000000 L 1620.750000 1154.000000 S 1620.750000 1164.000000 1630.750000 1164.000000 L 2475.000000 1164.000000 S 2485.000000 1164.000000 2485.000000 1174.000000 L 2485.000000 1560.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"2519.000000\" y=\"1554.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Shader -&gt; org.lwjgl.opengl.GL20)[0]\"><path d=\"M 1642.500000 179.000000 L 1642.500000 1620.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"1677.000000\" y=\"1614.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Shader -&gt; math.Matrix4f)[0]\"><path d=\"M 1795.000000 179.000000 L 1795.000000 810.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"1829.000000\" y=\"803.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.World -&gt; Shader)[0]\"><path d=\"M 2083.000000 880.000000 L 2083.000000 964.000000 S 2083.000000 974.000000 2093.000000 974.000000 L 2209.500000 974.000000 S 2219.500000 974.000000 2219.500000 964.000000 L 2219.500000 228.000000 S 2219.500000 218.000000 2209.500000 218.000000 L 1890.000000 218.000000 S 1880.000000 218.000000 1880.000000 208.000000 L 1880.000000 181.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /><text x=\"1846.000000\" y=\"199.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Shader -&gt; voxel.World)[0]\"><path d=\"M 1847.500000 179.000000 L 1847.500000 258.000000 S 1847.500000 268.000000 1857.500000 268.000000 L 2073.000000 268.000000 S 2083.000000 268.000000 2083.000000 278.000000 L 2083.000000 810.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /></g><g id=\"com.ch.(math.Matrix4f -&gt; Shader)[0]\"><path d=\"M 1795.000000 880.000000 L 1795.000000 964.000000 S 1795.000000 974.000000 1805.000000 974.000000 L 1936.500000 974.000000 S 1946.500000 974.000000 1946.500000 964.000000 L 1946.500000 328.000000 S 1946.500000 318.000000 1936.500000 318.000000 L 1825.000000 318.000000 S 1815.000000 318.000000 1815.000000 308.000000 L 1815.000000 181.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4194508906)\" /></g><mask id=\"d2-4194508906\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"2650\" height=\"1930\">\n<rect x=\"11\" y=\"11\" width=\"2650\" height=\"1930\" fill=\"white\"></rect>\n<rect x=\"1781.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"943.000000\" y=\"1464.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2271.000000\" y=\"1464.000000\" width=\"50\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1794.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"938.500000\" y=\"1519.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2287.500000\" y=\"1519.000000\" width=\"17\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1623.500000\" y=\"134.500000\" width=\"57\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"933.000000\" y=\"1574.000000\" width=\"58\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2054.500000\" y=\"1586.500000\" width=\"144\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2263.500000\" y=\"1586.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2432.500000\" y=\"1586.500000\" width=\"105\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1773.000000\" y=\"768.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2060.000000\" y=\"768.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"943.000000\" y=\"1629.000000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1755.500000\" y=\"835.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2058.500000\" y=\"835.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"234.500000\" y=\"1696.500000\" width=\"163\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"462.500000\" y=\"1696.500000\" width=\"134\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"661.500000\" y=\"1696.500000\" width=\"173\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"899.500000\" y=\"1696.500000\" width=\"183\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1147.500000\" y=\"1696.500000\" width=\"124\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1336.500000\" y=\"1696.500000\" width=\"174\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1575.500000\" y=\"1696.500000\" width=\"114\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Shader -> org.lwjgl.opengl.GL20.GL_COMPILE_STATUS: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> org.lwjgl.opengl.GL20.GL_LINK_STATUS: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> org.lwjgl.opengl.GL20.GL_VALIDATE_STATUS: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> org.lwjgl.opengl.GL20.glGetProgramInfoLog: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> org.lwjgl.opengl.GL20.glGetProgrami: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> org.lwjgl.opengl.GL20.glGetShaderInfoLog: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> org.lwjgl.opengl.GL20.glGetShaderi: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> java.io.FileInputStream: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> java.io.IOException: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> java.io.InputStream: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> org.lwjgl.opengl.GL20: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.World -> com.ch.Shader: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Shader -> com.ch.voxel.World: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Matrix4f -> com.ch.Shader: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\norg.lwjgl.opengl.GL20.glGetShaderi: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20.GL_VALIDATE_STATUS: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20.GL_COMPILE_STATUS: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20.glGetProgrami: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.io.InputStream: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20.glGetProgramInfoLog: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.io.FileInputStream: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20.GL_LINK_STATUS: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20.glGetShaderInfoLog: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.io.IOException: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.math.Matrix4f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Shader: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.voxel.World: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Shader: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "52acafe5-6ccf-3c9e-e043-ad6685714c26",
            "ancestors": [],
            "description": "Is designed to load and manipulate shaders in OpenGL. It provides methods for binding the shader program, uniform floats and matrices, and validating the program. The class also loads shaders from files and compiles them into programs.",
            "name": "Shader",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 97,
            "docLength": null
          },
          {
            "id": "e8b70d27-5f13-3eb1-1940-1d18e1524239",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Sets the active program object reference to the `program` field, allowing access to its resources and functions.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import org.lwjgl.opengl.GL20;\n\npublic class Shader {\n    private int program;\n    \n    public Shader(int program) {\n        this.program = program;\n    }\n    \n    public void bind() {\n        GL20.glUseProgram(program);\n    }\n}\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d465909e-403b-8b8e-ef4b-3ca169d8f26e",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Retrieves the value of a `program` field within its own class.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer value representing the program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tShader shader = Shader.loadShader(\"shader\"); // loads a shader from the file \"shader.vert\" and \"shader.frag\"\n\tint program = shader.getProgram(); // gets the id of the program object\n\tGL20.glUseProgram(program); // uses the program object\n}\n",
              "description": ""
            },
            "name": "getProgram",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "dd2972b2-a91d-b9b3-824b-e1660aed602a",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Is a method that sets floating-point values for a named location in a GL context, based on the length of the input array of values.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "location of the uniform variable in the program, which is used to determine the appropriate method to call for setting the uniform value.",
                "complex_type": false
              },
              {
                "name": "vals",
                "type_name": "float[]",
                "description": "0 or more float values that will be passed to the `glUniform*` function calls, depending on the length of the array.\n\n* Length: 1 to 4\n* Content: A sequence of floating-point values",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Shader shader = new Shader(0);\nshader.uniformf(\"my_float\", 3.14f);\n",
              "description": ""
            },
            "name": "uniformf",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "8828ca68-b72a-10a8-fc49-0dca9eac081e",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Updates a uniform matrix with the specified name using the `glUniformMatrix4` method from OpenGL.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of the uniform location where the matrix is to be stored.",
                "complex_type": false
              },
              {
                "name": "mat",
                "type_name": "Matrix4f",
                "description": "4x4 matrix to be uniformed.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Shader shader = Shader.loadShader(\"shader\");\n\tMatrix4f modelViewProjection = new Matrix4f();\n\tmodelViewProjection.setIdentity();\n\tshader.unifromMat4(\"ModelViewProjection\", modelViewProjection);\n",
              "description": ""
            },
            "name": "unifromMat4",
            "location": {
              "start": 52,
              "insert": 52,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "a9258449-68f7-1ca7-3740-1e4f635cddaf",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Retrieves the location of a uniform in a program using the `GL20` class and method `glGetUniformLocation`.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of the uniform location to retrieve in the program's uniform buffer object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the location of a uniform in the program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Shader shader = new Shader(program);\n\tString name = \"myUniform\";\n\tint location = shader.getLoaction(name);\n",
              "description": ""
            },
            "name": "getLoaction",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "987197d4-188a-2fae-954d-112df78540b9",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Loads a shader program from a file, comprising of a vertex and fragment shader. It creates a program object using `glCreateProgram()`, loads the shaders using `glCreateShader()` and validates the program using `validateProgram()`. Finally, it returns a new Shader object representing the loaded program.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "path to a file containing the vertex and fragment shaders that will be loaded into the program.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Shader",
              "description": "a `Shader` object representing the compiled shader program.",
              "complex_type": false
            },
            "name": "loadShader",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "3e892c91-1cc9-9cb5-b747-934eebb064d4",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Creates a shader program and attaches it to a program handle, loading a shader source from a string parameter.",
            "params": [
              {
                "name": "target",
                "type_name": "int",
                "description": "type of shader being created, with values of 0 for a vertex shader and non-zero values for a fragment shader or other types of shaders.",
                "complex_type": false
              },
              {
                "name": "src",
                "type_name": "String",
                "description": "1:1 mapping between the source code of the shader and the actual code that will be compiled by the `glShaderSource()` method.",
                "complex_type": false
              },
              {
                "name": "program",
                "type_name": "int",
                "description": "3D graphics program that will be used to link the generated shader with.",
                "complex_type": false
              }
            ],
            "name": "loadShader",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "780632f9-8941-beb8-aa42-84bf647bea3f",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Validates a program by checking its linking and validation status, and prints any error messages if there are any.",
            "params": [
              {
                "name": "program",
                "type_name": "int",
                "description": "3D graphics program that needs to be validated for linking and validation errors.",
                "complex_type": false
              }
            ],
            "name": "validateProgram",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "91493829-b571-88ad-234c-a4c3132f907b",
            "ancestors": [
              "52acafe5-6ccf-3c9e-e043-ad6685714c26"
            ],
            "description": "Reads the contents of a given file as a string, handling potential exceptions gracefully.",
            "params": [
              {
                "name": "file",
                "type_name": "String",
                "description": "path to a file containing the text to be read.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string containing the contents of the specified file.",
              "complex_type": false
            },
            "name": "getText",
            "location": {
              "start": 100,
              "insert": 100,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          }
        ]
      }
    }
  }
]